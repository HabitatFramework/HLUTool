
<!--
    // HLUTool is used to view and maintain habitat and land use GIS data.
    //
    // (c) Copyright Microsoft Corporation.
    // This source is subject to Microsoft Public License (Ms-PL).
    // Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
    // All other rights reserved.
    //
    // Copyright (c) 2014 Sussex Biodiversity Record Centre
    // Copyright (c) 2016 Thames Valley Environmental Records Centre
    // Copyright (c) 2019 London & South East Record Centres (LaSER)
    //
    // This file is part of HLUTool.
    //
    // HLUTool is free software: you can redistribute it and/or modify
    // it under the terms of the GNU General Public License as published by
    // the Free Software Foundation, either version 3 of the License, or
    // (at your option) any later version.
    //
    // HLUTool is distributed in the hope that it will be useful,
    // but WITHOUT ANY WARRANTY; without even the implied warranty of
    // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    // GNU General Public License for more details.
    //
    // You should have received a copy of the GNU General Public License
    // along with HLUTool.  If not, see <http://www.gnu.org/licenses/>.
-->

<!--  Theme used for HLU application based on Microsoft Expression Light.  -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:hlu="clr-namespace:HLU.Converters"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:primitives="clr-namespace:Microsoft.Windows.Controls.Primitives;assembly=WPFToolkit"
                    xmlns:tkit="http://schemas.microsoft.com/wpf/2008/toolkit"
                    xmlns:vsm="clr-namespace:System.Windows;assembly=WPFToolkit"
                    mc:Ignorable="d">

    <!--  <hlu:Bool2VisibilityConverter x:Key="bool2VisibilityConverter" />  -->

    <!--  Main Colors  -->

    <Color x:Key="MainColor">#FF595959</Color>
    <Color x:Key="HoverColor">#FF303030</Color>
    <Color x:Key="DefaultColor">#FF9BB1C5</Color>
    <SolidColorBrush x:Key="LightBrush" Color="#FF333333" />
    <SolidColorBrush x:Key="ShadeBrush" Color="#FF434343" />

    <Color x:Key="TopGradientSelectColor">#FFFFFFFF</Color>
    <Color x:Key="BottomGradientSelectColor">#FF737373</Color>

    <Color x:Key="BlackColor">#FF000000</Color>
    <Color x:Key="DarkColor">#FF4A4A4A</Color>
    <Color x:Key="MidColor">#FFAAAAAA</Color>
    <Color x:Key="LightColor">#FFDDDDDD</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>

    <SolidColorBrush x:Key="TextBrush" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="NormalBrush" Color="{StaticResource MainColor}" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="{StaticResource MidColor}" />
    <SolidColorBrush x:Key="DarkBorderBrush" Color="#FF666666" />
    <SolidColorBrush x:Key="HoverBrush" Color="{StaticResource HoverColor}" />
    <SolidColorBrush x:Key="GlyphBrush" Color="{StaticResource WhiteColor}" />

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0.5,0.042" EndPoint="0.5,0.971">
        <GradientStop Offset="0" Color="#4C000000" />
        <GradientStop Offset="1" Color="#26FFFFFF" />
        <GradientStop Offset="0.467" Color="#4C000000" />
        <GradientStop Offset="0.479" Color="#26FFFFFF" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="{StaticResource DarkColor}" />

    <LinearGradientBrush x:Key="SelectedBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0" Color="{StaticResource TopGradientSelectColor}" />
        <GradientStop Offset="1" Color="{StaticResource BottomGradientSelectColor}" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#FF888888" />
    <SolidColorBrush x:Key="DisabledTextBrush" Color="{StaticResource LightColor}" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#FF787878" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="{StaticResource MidColor}" />
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FF595959" />

    <SolidColorBrush x:Key="RowHeaderBackgroundBrush" Color="#FF585858" />
    <SolidColorBrush x:Key="RowHeaderIsMouseOverBrush" Color="#FF888888" />
    <SolidColorBrush x:Key="RowBackgroundSelectedBrush" Color="{StaticResource DarkColor}" />
    <!--  #FFD6D6D6}" />  -->
    <SolidColorBrush x:Key="RowBorderSelectedBrush" Color="{StaticResource MidColor}" />
    <!--  #FFFFFFFF" #FFD6D6D6/>  -->


    <!--  EXPRESSION COMMON VALUES  -->

    <LinearGradientBrush x:Key="ShineBrush" StartPoint="0.5,0.042" EndPoint="0.5,0.971">
        <GradientStop Offset="0" Color="#59FFFFFF" />
        <GradientStop Offset="1" Color="#00FFFFFF" />
        <GradientStop Offset="0.467" Color="#26FFFFFF" />
        <GradientStop Offset="0.475" Color="#00FFFFFF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HoverShineBrush" StartPoint="0.5,0.042" EndPoint="0.5,0.971">
        <GradientStop Offset="0" Color="#4CFFFFFF" />
        <GradientStop Offset="1" Color="#26FFFFFF" />
        <GradientStop Offset="0.467" Color="#26FFFFFF" />
        <GradientStop Offset="0.475" Color="#00FFFFFF" />
        <GradientStop Offset="0.856" Color="#00FFFFFF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#444" />
        <GradientStop Offset="1.0" Color="#888" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DefaultedBorderBrush" Color="{StaticResource DefaultColor}" />
    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />




    <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource DarkColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DatePickerTextBox  -->
    <Style TargetType="{x:Type tkit:DatePickerTextBox}">
        <Setter Property="Background" Value="#FFD6D6D6" />
        <!--  <Setter Property="Padding" Value="2" />  -->
        <Setter Property="BorderBrush" Value="#969696" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="LightGray" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--  HighlightTemplate  -->
    <ControlTemplate x:Key="WarningTemplate">
        <DockPanel>
            <Grid DockPanel.Dock="Right">
                <Polygon Points="0,17 14,17, 7,1"
                         VerticalAlignment="Center"
                         Fill="Orange"
                         Stroke="Black"
                         StrokeThickness="0.5" />
                <TextBlock Margin="0"
                           VerticalAlignment="Center"
                           FontWeight="Bold"
                           Foreground="White"
                           Padding="5,4,0,0"
                           Text="!"
                           ToolTip="{Binding RelativeSource={RelativeSource Self},
                                             Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Grid>
            <Border BorderBrush="Orange" BorderThickness="1">
                <AdornedElementPlaceholder />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <!--  ErrorTemplate  -->
    <ControlTemplate x:Key="ErrorTemplate">
        <DockPanel>
            <Grid DockPanel.Dock="Right">
                <Ellipse Width="14"
                         Height="14"
                         VerticalAlignment="Center"
                         Fill="Red"
                         Stroke="Black"
                         StrokeThickness="0.5" />
                <TextBlock Margin="0"
                           VerticalAlignment="Center"
                           FontWeight="Bold"
                           Foreground="White"
                           Padding="5,0,0,0"
                           Text="!"
                           ToolTip="{Binding RelativeSource={RelativeSource Self},
                                             Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Grid>
            <Border BorderBrush="Red" BorderThickness="1">
                <AdornedElementPlaceholder />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="LabelWarningTemplate">
        <DockPanel>
            <Grid DockPanel.Dock="Right">
                <Polygon Points="0,17 14,17, 7,1"
                         VerticalAlignment="Center"
                         Fill="Orange"
                         Stroke="Black"
                         StrokeThickness="0.5" />
                <TextBlock Margin="0"
                           VerticalAlignment="Center"
                           FontWeight="Bold"
                           Foreground="White"
                           Padding="5,4,0,0"
                           Text="!"
                           ToolTip="{Binding RelativeSource={RelativeSource Self},
                                             Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Grid>
            <Border BorderBrush="Orange"
                    BorderThickness="1"
                    Padding="4,0,4,2">
                <AdornedElementPlaceholder />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="LabelErrorTemplate">
        <DockPanel>
            <Grid DockPanel.Dock="Right">
                <Ellipse Width="14"
                         Height="14"
                         VerticalAlignment="Center"
                         Fill="Red"
                         Stroke="Black"
                         StrokeThickness="0.5" />
                <TextBlock Margin="0"
                           VerticalAlignment="Center"
                           FontWeight="Bold"
                           Foreground="White"
                           Padding="5,0,0,0"
                           Text="!"
                           ToolTip="{Binding RelativeSource={RelativeSource Self},
                                             Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Grid>
            <Border BorderBrush="Red"
                    BorderThickness="1"
                    Padding="4,0,4,2">
                <AdornedElementPlaceholder />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="DataGridValidationWarningTemplate">
        <Grid>
            <Polygon Points="0,17 14,17, 7,1"
                         VerticalAlignment="Center"
                         Fill="Orange"
                         Stroke="Black"
                         StrokeThickness="0.5" />
            <TextBlock Margin="0"
                       VerticalAlignment="Center"
                       FontWeight="Bold"
                       Foreground="White"
                       Padding="5,4,0,0"
                       Text="!"
                       ToolTip="{Binding RelativeSource={RelativeSource FindAncestor,
                                                                        AncestorType={x:Type tkit:DataGridRow}},
                                         Path=(Validation.Errors).CurrentItem.ErrorContent}"
                       Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type tkit:DataGridRow}},
                                            Path=(Validation.HasError)}" />
            <!--  Converter={StaticResource bool2VisibilityConverter}}" />  -->
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="DataGridValidationErrorTemplate">
        <Grid>
            <Ellipse Width="14"
                     Height="14"
                     VerticalAlignment="Center"
                     Fill="Red"
                     Stroke="Black"
                     StrokeThickness="0.5" />
            <TextBlock Margin="0"
                       VerticalAlignment="Center"
                       FontWeight="Bold"
                       Foreground="White"
                       Padding="5,0,0,0"
                       Text="!"
                       ToolTip="{Binding RelativeSource={RelativeSource FindAncestor,
                                                                        AncestorType={x:Type tkit:DataGridRow}},
                                         Path=(Validation.Errors).CurrentItem.ErrorContent}"
                       Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type tkit:DataGridRow}},
                                            Path=(Validation.HasError)}" />
            <!--  Converter={StaticResource bool2VisibilityConverter}}" />  -->
        </Grid>
    </ControlTemplate>

    <!--  DataGridRow  -->
    <Style TargetType="{x:Type tkit:DataGridRow}">
        <Setter Property="ValidationErrorTemplate" Value="{StaticResource DataGridValidationErrorTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource RowBackgroundSelectedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        <Style x:Key="RowStyle" TargetType="tkit:DataGridRow" >
        <Style.Triggers>
        <Trigger Property="AlternationIndex" Value="1" >
        <Setter Property="Background" Value="{StaticResource DataGrid_Style0_Alt1}" />
        </Trigger>
        <Trigger Property="AlternationIndex" Value="0" >
        <Setter Property="Background" Value="{StaticResource DataGrid_Style0_Alt0}" />
        </Trigger>
        </Style.Triggers>
        </Style>
    -->


    <!--  <Setter Property="RowHeaderStyle" Value="{StaticResource DataGridRowHeaderStyle}"/>  -->

    <!--
        <Style TargetType="{x:Type tkit:DataGridComboBoxColumn}">
        
        </Style>
    -->
    <!--
        <tkit:DataGridTemplateColumn Header="Determination Quality" Width="SizeToHeader" MinWidth="100">
        <tkit:DataGridTemplateColumn.CellEditingTemplate>
        <DataTemplate>
        <ComboBox Name="ComboBoxDeterminationQuality"
        SelectedValue="{Binding quality_determination}"
        DisplayMemberPath="description"
        SelectedValuePath="code" HorizontalAlignment="Stretch"
        ItemsSource="{Binding DataContext.BapDeterminationQualityCodes, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, IsAsync=true}" />
        </DataTemplate>
        
        </tkit:DataGridTemplateColumn.CellEditingTemplate>
        <tkit:DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
        <TextBlock Text="{Binding quality_determination}" />
        </DataTemplate>
        </tkit:DataGridTemplateColumn.CellTemplate>
        </tkit:DataGridTemplateColumn>
        
        <tkit:DataGridTemplateColumn Header="Interpretation Quality" Width="SizeToHeader" MinWidth="100">
        <tkit:DataGridTemplateColumn.CellEditingTemplate>
        <DataTemplate>
        <ComboBox Name="ComboBoxInterpretationQuality"
        SelectedValue="{Binding quality_interpretation}"
        DisplayMemberPath="description"
        SelectedValuePath="code" HorizontalAlignment="Stretch"
        ItemsSource="{Binding DataContext.BapInterpretationQualityCodes, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, IsAsync=true, UpdateSourceTrigger=PropertyChanged}" />
        </DataTemplate>
        
        </tkit:DataGridTemplateColumn.CellEditingTemplate>
        <tkit:DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
        <TextBlock Text="Binding quality_interpretation}" />
        </DataTemplate>
        </tkit:DataGridTemplateColumn.CellTemplate>
        </tkit:DataGridTemplateColumn>
    -->



    <!--
        <Setter Property="RowBackground" Value="{StaticResource NormalBrush}" />
        <Setter Property="AlternatingRowBackground" Value="{StaticResource HoverBrush}" />
    -->

    <!--  DataGridCell  -->
    <Style TargetType="{x:Type tkit:DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type tkit:DataGridCell}">
                    <Border Margin="2,0,2,0"
                            Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"
                            SnapsToDevicePixels="True">
                        <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type tkit:DataGridCell}">
                            <Border Margin="2,0,2,0"
                                    Background="{StaticResource RowBackgroundSelectedBrush}"
                                    BorderBrush="{StaticResource RowBorderSelectedBrush}"
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True">
                                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>



    <LinearGradientBrush x:Key="DataGridHeaderMouseOverBackgroundBrush" StartPoint="0.5,0.039" EndPoint="0.5,0.976">
        <GradientStop Offset="0" Color="#7F595959" />
        <GradientStop Offset="1" Color="#19FFFFFF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DataGridHeaderBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFD5DFE5" />
        <!--  #739D20  -->
        <GradientStop Offset="1" Color="#4F8300" />
        <!--  #4F8300  -->
    </LinearGradientBrush>

    <!--
        <LinearGradientBrush x:Key="DataGridHeaderMouseOverBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#90B321" Offset="0" />
        <GradientStop Color="#66A002" Offset="1" />
        </LinearGradientBrush>
    -->
    <LinearGradientBrush x:Key="DataGridHeaderBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#9ECD42" />
        <GradientStop Offset="1" Color="#3D5808" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DataGridHeaderSortedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#B58801" />
        <GradientStop Offset="1" Color="#681900" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DataGridHeaderSortedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#C46007" />
        <GradientStop Offset="1" Color="#AF2600" />
    </LinearGradientBrush>





    <!--
        <Style TargetType="{x:Type tkit:DataGridColumnHeader}"  >
        <Setter Property="Background" Value="#88800080" />
        <Setter Property="Foreground" Value="White" />
        <Style.Triggers>
        <Trigger Property="SortDirection" Value="{x:Null}">
        <Setter Property="Background" Value="{DynamicResource DataGridHeaderBackgroundBrush}" />
        <Setter Property="BorderBrush"  Value="Transparent" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
        <Condition Property="IsMouseOver" Value="True" />
        <Condition Property="SortDirection" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource DataGridHeaderMouseOverBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource DataGridHeaderBorderBrush}" />
        </MultiTrigger>
        
        <MultiTrigger>
        <MultiTrigger.Conditions>
        <Condition Property="IsMouseOver" Value="true" />
        <Condition Property="SortDirection" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource DataGridHeaderMouseOverBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource DataGridHeaderBorderBrush}" />
        </MultiTrigger>
        <Trigger Property="SortDirection" Value="Ascending">
        <Setter Property="Background" Value="{StaticResource DataGridHeaderSortedBackgroundBrush}" />
        </Trigger>
        <Trigger Property="SortDirection" Value="Descending">
        <Setter Property="Background" Value="{StaticResource DataGridHeaderSortedBackgroundBrush}" />
        </Trigger>
        </Style.Triggers>
        </Style>
    -->



    <!--  Exression Light DataGrid  -->

    <!--  ColumnHeaderGripperStyle  -->
    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="1" />
        <Setter Property="Background" Value="Black" />
        <!--  Value="Transparent"  -->
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  RowHeaderGripperStyle  -->
    <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="10" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Background" Value="Black" />
        <!--  Value="Transparent"  -->
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DataGridRow  -->
    <!--
        <Style TargetType="tkit:DataGridRow">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="controls:DataGridRow">
        <Border x:Name="DGR_Border"
        Background="{TemplateBinding Background}"
        BorderBrush="{TemplateBinding BorderBrush}"
        BorderThickness="{TemplateBinding BorderThickness}"
        SnapsToDevicePixels="True">
        <primitives:SelectiveScrollingGrid x:Name="Root" Margin="1,1,1,1">
        <Grid.Resources>
        <Storyboard x:Key="DetailsVisibleTransition">
        <DoubleAnimation Duration="00:00:0.1" Storyboard.TargetName="DetailsPresenter"
        Storyboard.TargetProperty="ContentHeight" />
        </Storyboard>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
    -->


    <!--
        <vsm:VisualStateManager.VisualStateGroups>
        <vsm:VisualStateGroup x:Name="CommonStates">
        <vsm:VisualStateGroup.Transitions>
        <vsm:VisualTransition GeneratedDuration="0" />
        <vsm:VisualTransition From="Normal" GeneratedDuration="00:00:00.3000000" To="MouseOver" />
        <vsm:VisualTransition From="MouseOver" GeneratedDuration="00:00:00.5000000" To="Normal" />
        <vsm:VisualTransition From="Normal" GeneratedDuration="00:00:00.3000000" To="MouseOver Selected" />
        <vsm:VisualTransition From="MouseOver Selected" GeneratedDuration="00:00:00.5000000" To="Normal" />
        <vsm:VisualTransition From="Normal" GeneratedDuration="00:00:00.3000000" To="Normal Selected" />
        <vsm:VisualTransition From="Normal Selected" GeneratedDuration="00:00:00.5000000" To="Normal" />
        </vsm:VisualStateGroup.Transitions>
        <vsm:VisualState x:Name="Normal">
        <Storyboard />
        </vsm:VisualState>
        <vsm:VisualState x:Name="NormalAlternatingRow">
        <Storyboard />
        </vsm:VisualState>
        <vsm:VisualState x:Name="MouseOver">
        <Storyboard>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        </vsm:VisualState>
        <vsm:VisualState x:Name="NormalSelected">
        <Storyboard>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        </vsm:VisualState>
        <vsm:VisualState x:Name="MouseOverSelected">
        <Storyboard>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        </vsm:VisualState>
        <vsm:VisualState x:Name="UnfocusedSelected">
        <Storyboard>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.6" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        </vsm:VisualState>
        </vsm:VisualStateGroup>
        </vsm:VisualStateManager.VisualStateGroups>
    -->
    <!--
        <Rectangle x:Name="BackgroundRectangle" Grid.ColumnSpan="2" Grid.RowSpan="2"
        Fill="{StaticResource NormalBrush}" Opacity="0.25" />
        
        <Rectangle x:Name="SelectedRectangle" Opacity="0" Fill="{StaticResource SelectedBackgroundBrush}"
        Grid.ColumnSpan="2" Grid.RowSpan="2" />
        
        <Rectangle x:Name="HoverRectangle" Fill="{StaticResource NormalBrush}" Opacity="0" Grid.ColumnSpan="2"
        Grid.RowSpan="2" />
        
        <primitives:DataGridCellsPresenter Grid.Column="1"
        ItemsPanel="{TemplateBinding ItemsPanel}"
        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        
        <primitives:DataGridDetailsPresenter
        primitives:SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:DataGrid}},
        Path=AreRowDetailsFrozen, Converter={x:Static controls:DataGrid.RowDetailsScrollingConverter},
        ConverterParameter={x:Static controls:SelectiveScrollingOrientation.Vertical}}"
        Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DetailsVisibility}" />
        
        <primitives:DataGridRowHeader primitives:SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"  Grid.RowSpan="2"
        Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:DataGrid}}, Path=HeadersVisibility, Converter={x:Static controls:DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static controls:DataGridHeadersVisibility.Row}}"/>
        
        <Rectangle Height="1" HorizontalAlignment="Stretch" x:Name="BottomGridLine" Grid.Column="1" Grid.Row="2" Fill="White" />
        
        </primitives:SelectiveScrollingGrid>
        </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Setter Property="ValidationErrorTemplate">
        <Setter.Value>
        <ControlTemplate>
        <Grid>
        <Ellipse Width="12" Height="12"
        Fill="Red" Stroke="Black"
        StrokeThickness="0.5" VerticalAlignment="Center" />
        <TextBlock FontWeight="Bold" Padding="4,0,0,0"
        Margin="0" VerticalAlignment="Center" Foreground="White" Text="!"
        ToolTip="{Binding RelativeSource={RelativeSource
        FindAncestor, AncestorType={x:Type tkit:DataGridRow}},
        Path=(Validation.Errors)[0].ErrorContent}"/>
        </Grid>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
    -->
    <!--
        <Style x:Key="{x:Type primitives:DataGridCellsPresenter}" TargetType="{x:Type primitives:DataGridCellsPresenter}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type primitives:DataGridCellsPresenter}">
        <ItemsPresenter />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
    -->
    <!--  DataGridCell  -->
    <!--
        <Style TargetType="controls:DataGridCell">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="controls:DataGridCell">
        <Grid x:Name="Root" Background="Transparent">
        <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        
        
        
        <vsm:VisualStateManager.VisualStateGroups>
        <vsm:VisualStateGroup x:Name="CurrentStates">
        <vsm:VisualStateGroup.Transitions>
        <vsm:VisualTransition GeneratedDuration="0" />
        </vsm:VisualStateGroup.Transitions>
        <vsm:VisualState x:Name="Regular" />
        <vsm:VisualState x:Name="Current">
        <Storyboard>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Opacity">
        <SplineDoubleKeyFrame KeyTime="0" Value="0.8" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        </vsm:VisualState>
        </vsm:VisualStateGroup>
        </vsm:VisualStateManager.VisualStateGroups>
        
        
        <Rectangle HorizontalAlignment="Stretch" x:Name="FocusVisual" VerticalAlignment="Stretch" IsHitTestVisible="false"
        Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" Stroke="{StaticResource GlyphBrush}"
        StrokeThickness="1" />
        <ContentPresenter Cursor="{TemplateBinding Cursor}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
        Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
        Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
        <Rectangle x:Name="RightGridLine" VerticalAlignment="Stretch" Width="1" Grid.Column="1"/>
        
        </Grid>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
    -->
    <!--
        <Rectangle x:Name="RightGridLine"
        Fill="{StaticResource ShineBrush}
    -->

    <!--  DataGridColumnHeader  -->
    <Style TargetType="primitives:DataGridColumnHeader">
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SeparatorBrush" Value="#FFC9CACA" />
        <Setter Property="Padding" Value="4,4,4,4" />
        <!--  "4,4,5,4"  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="primitives:DataGridColumnHeader">
                    <Grid x:Name="Root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>


                        <!--  VSM diable/enable  -->

                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualStateGroup.Transitions>
                                    <vsm:VisualTransition GeneratedDuration="00:00:0.1" />
                                    <vsm:VisualTransition From="Normal"
                                                          GeneratedDuration="00:00:00.3000000"
                                                          To="MouseOver" />
                                    <vsm:VisualTransition From="MouseOver"
                                                          GeneratedDuration="00:00:00.5000000"
                                                          To="Normal" />
                                </vsm:VisualStateGroup.Transitions>
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Duration="00:00:00.0010000"
                                                                       Storyboard.TargetName="HoverRectangle"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="SortStates">
                                <vsm:VisualStateGroup.Transitions>
                                    <vsm:VisualTransition GeneratedDuration="00:00:0.1" />
                                </vsm:VisualStateGroup.Transitions>
                                <vsm:VisualState x:Name="Unsorted" />
                                <vsm:VisualState x:Name="SortAscending">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortIcon" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="SortDescending">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortIcon" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortIconTransform" Storyboard.TargetProperty="ScaleY">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="-.9" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>

                        <!--  VSM diable/enable end  -->



                        <Rectangle x:Name="BackgroundRectangle"
                                   Grid.RowSpan="2"
                                   Grid.ColumnSpan="2"
                                   Fill="{StaticResource NormalBrush}"
                                   Stretch="Fill"
                                   Stroke="{StaticResource NormalBorderBrush}"
                                   StrokeThickness="1" />
                        <Rectangle x:Name="HoverRectangle"
                                   Grid.RowSpan="2"
                                   Grid.ColumnSpan="2"
                                   Fill="{StaticResource HoverBrush}"
                                   Opacity="0"
                                   Stretch="Fill" />
                        <ContentPresenter Grid.RowSpan="2"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          Cursor="{TemplateBinding Cursor}" />
                        <Rectangle x:Name="ShineRectangle"
                                   Grid.RowSpan="2"
                                   Grid.ColumnSpan="2"
                                   Fill="{StaticResource ShineBrush}"
                                   Stretch="Fill"
                                   Stroke="{StaticResource NormalBorderBrush}"
                                   StrokeThickness="1" />
                        <Rectangle x:Name="VerticalSeparator"
                                   Grid.RowSpan="2"
                                   Grid.Column="2"
                                   Width="1"
                                   VerticalAlignment="Stretch"
                                   Fill="{TemplateBinding SeparatorBrush}"
                                   Visibility="{TemplateBinding SeparatorVisibility}" />
                        <Path x:Name="SortIcon"
                              Grid.RowSpan="2"
                              Grid.Column="1"
                              Width="8"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="F1 M -5.215,6.099L 5.215,6.099L 0,0L -5.215,6.099 Z "
                              Fill="#FFFFFFFF"
                              Opacity="0"
                              RenderTransformOrigin=".5,.5"
                              Stretch="Uniform">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="SortIconTransform"
                                                    ScaleX=".9"
                                                    ScaleY=".9" />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Thumb x:Name="PART_LeftHeaderGripper"
                               Grid.RowSpan="2"
                               Grid.Column="2"
                               HorizontalAlignment="Left"
                               Style="{StaticResource ColumnHeaderGripperStyle}" />
                        <Thumb x:Name="PART_RightHeaderGripper"
                               Grid.RowSpan="2"
                               Grid.Column="2"
                               HorizontalAlignment="Right"
                               Style="{StaticResource ColumnHeaderGripperStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>







    <!--  Jaime Rodriguez  -->
    <!--
        <Style TargetType="tkit:DataGridRowHeader">
        <Setter Property="Background" Value="{StaticResource RowHeaderBackgroundBrush}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="tkit:DataGridRowHeader">
        <Grid>
        <tkit:DataGridHeaderBorder IsSelected="{TemplateBinding IsRowSelected}"
        IsHovered ="{TemplateBinding IsMouseOver}"
        IsPressed="{TemplateBinding IsPressed}"
        BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type tkit:DataGrid}},
        Path=HorizontalGridLinesBrush}"
        Background="{TemplateBinding Background}"
        BorderThickness="0,1,0,0"
        Padding ="{TemplateBinding Padding}"
        Orientation="Horizontal"
        SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
        SeparatorBrush="{TemplateBinding SeparatorBrush}" Margin="0,-1,0,0">
        <StackPanel Orientation="Horizontal">
        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
        VerticalAlignment="Center" />
        <Control SnapsToDevicePixels="false"
        Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type tkit:DataGridRow}},
        Path=(Validation.HasError), Converter={StaticResource bool2VisibilityConverter}}"
        Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type tkit:DataGridRow}},
        Path=ValidationErrorTemplate}" />
        </StackPanel>
        </tkit:DataGridHeaderBorder>
        <Thumb x:Name="PART_TopHeaderGripper" VerticalAlignment="Top" Height="1"
        Style="{StaticResource RowHeaderGripperStyle}" />
        <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom" Height="1"
        Style="{StaticResource RowHeaderGripperStyle}" />
        </Grid>
        <ControlTemplate.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource RowHeaderIsMouseOverBrush}" />
        </Trigger>
        <Trigger Property="IsRowSelected" Value="True">
        <Setter Property="Background" Value="{StaticResource RowBackgroundSelectedBrush}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
    -->


    <!--  DataGridRowHeader  -->

    <Style TargetType="primitives:DataGridRowHeader">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SeparatorBrush" Value="#FFFFFFFF" />
        <Setter Property="SeparatorVisibility" Value="Collapsed" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="primitives:DataGridRowHeader">
                    <Grid x:Name="Root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>





                        <!--  VSM diable/enable  -->

                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualStateGroup.Transitions>
                                    <vsm:VisualTransition GeneratedDuration="00:00:0.2" />
                                </vsm:VisualStateGroup.Transitions>
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Duration="00:00:00.0010000"
                                                                       Storyboard.TargetName="HoverRectangle"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="MouseOverCurrentRowSelected">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Duration="00:00:00.0010000"
                                                                       Storyboard.TargetName="SelectedRectangle"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Duration="00:00:00.0010000"
                                                                       Storyboard.TargetName="HoverRectangle"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="NormalCurrentRow">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="NormalSelected">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Duration="00:00:00.0010000"
                                                                       Storyboard.TargetName="SelectedRectangle"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="NormalEditingRow">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Duration="00:00:00.0010000"
                                                                       Storyboard.TargetName="grid"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>

                        <!--  VSM diable/enable end  -->






                        <!--  "{StaticResource NormalBrush}"#FF1F3B53 Fill="#FFE9EEF4"  -->

                        <Border Grid.RowSpan="3"
                                Grid.ColumnSpan="2"
                                BorderBrush="#FFFFFFFF"
                                BorderThickness="1, 0, 1, 0">
                            <Grid x:Name="grid"
                                  Width="Auto"
                                  Height="Auto">
                                <Rectangle Fill="{StaticResource ControlBackgroundBrush}" Stretch="Fill" />
                                <Rectangle x:Name="HoverRectangle"
                                           Fill="{StaticResource NormalBrush}"
                                           Opacity="0.25"
                                           Stretch="Fill" />
                                <!--  <Rectangle Stretch="Fill" Fill="{StaticResource NormalBrush}" Opacity="0.25" />  -->
                                <Rectangle x:Name="SelectedRectangle"
                                           Fill="{StaticResource SelectedBackgroundBrush}"
                                           Opacity="0"
                                           Stretch="Fill" />
                                <!--  <Rectangle Stretch="Fill" Fill="{StaticResource NormalBrush}" x:Name="HoverRectangle" Opacity="0" />  -->
                            </Grid>
                        </Border>
                        <Rectangle x:Name="HorizontalSeparator"
                                   Grid.Row="2"
                                   Grid.ColumnSpan="2"
                                   Height="1"
                                   Margin="1, 0, 1, 0"
                                   HorizontalAlignment="Stretch"
                                   Fill="{TemplateBinding SeparatorBrush}"
                                   Visibility="{TemplateBinding SeparatorVisibility}" />
                        <ContentPresenter Grid.RowSpan="2"
                                          Grid.Column="1"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}" />
                        <Path x:Name="CurrentRowGlyph"
                              Grid.RowSpan="2"
                              Width="6"
                              Height="10"
                              Margin="8,0,8,0"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="F1 M 511.047,352.682L 511.047,342.252L 517.145,347.467L 511.047,352.682 Z "
                              Fill="{StaticResource GlyphBrush}"
                              Opacity="0"
                              Stretch="Fill" />
                        <Path x:Name="EditingRowGlyph"
                              Grid.RowSpan="2"
                              Width="6"
                              Height="10"
                              Margin="8,0,8,0"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="F1 M 511.047,352.682L 511.047,342.252L 517.145,347.467L 511.047,352.682 Z "
                              Fill="{StaticResource GlyphBrush}"
                              Opacity="0"
                              Stretch="Fill" />
                        <Thumb x:Name="PART_TopHeaderGripper"
                               Grid.Row="2"
                               Grid.ColumnSpan="2"
                               Height="1"
                               VerticalAlignment="Top"
                               Style="{StaticResource RowHeaderGripperStyle}" />
                        <Thumb x:Name="PART_BottomHeaderGripper"
                               Grid.Row="2"
                               Grid.ColumnSpan="2"
                               Height="1"
                               VerticalAlignment="Bottom"
                               Style="{StaticResource RowHeaderGripperStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#FFFFFFFF" />
    </Style>

    <!--
        <Style TargetType="tkit:DataGrid">
        <Setter Property="RowBackground" Value="{StaticResource NormalBrush}" />
        <Setter Property="AlternatingRowBackground" Value="{StaticResource HoverBrush}" />
        <Setter Property="Background" Value="{StaticResource NormalBrush}" />
        <Setter Property="BorderBrush">
        <Setter.Value>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFA3AEB9" Offset="0" />
        <GradientStop Color="#FF8399A9" Offset="0.375" />
        <GradientStop Color="#FF718597" Offset="0.375" />
        <GradientStop Color="#FF617584" Offset="1" />
        </LinearGradientBrush>
        </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalGridLinesBrush" Value="#FFC9CACA" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="VerticalGridLinesBrush" Value="#FFDBDCDC" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="controls:DataGrid">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
        </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
    -->
    <!--  DataGrid  -->
    <!--  <Setter Property="AutoGenerateColumns" Value="True" />  -->
    <!--
        <Setter Property="RowHeaderStyle" Value="{StaticResource DataGridRowHeaderStyle}"/>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle}"/>
        <Setter Property="RowStyle" Value="{StaticResource DataGridRowStyle}"/>
        <Setter Property="CellStyle" Value="{StaticResource DataGridCellStyle}"/>
    -->





    <!--  DataGrid  -->
    <Style TargetType="controls:DataGrid">
        <Setter Property="RowBackground" Value="{StaticResource HoverBrush}" />
        <Setter Property="AlternatingRowBackground" Value="{StaticResource NormalBrush}" />
        <!--
            <Setter Property="RowBackground" Value="{StaticResource NormalBrush}" />
            <Setter Property="AlternatingRowBackground" Value="{StaticResource HoverBrush}" />
        -->
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}" />
        <Setter Property="HeadersVisibility" Value="All" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="SelectionMode" Value="Extended" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeColumns" Value="True" />
        <Setter Property="CanUserSortColumns" Value="True" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="RowHeight" Value="30" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Offset="0" Color="#FFA3AEB9" />
                    <GradientStop Offset="0.375" Color="#FF8399A9" />
                    <GradientStop Offset="0.375" Color="#FF718597" />
                    <GradientStop Offset="1" Color="#FF617584" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="DragIndicatorStyle">
            <Setter.Value>
                <Style TargetType="ContentControl">
                    <Setter Property="FontSize" Value="10.5" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="Foreground" Value="#7FFFFFFF" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ContentControl">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Rectangle x:Name="BackgroundRectangle"
                                               Grid.RowSpan="2"
                                               Grid.ColumnSpan="2"
                                               Fill="#66808080"
                                               Stretch="Fill" />
                                    <Rectangle x:Name="BackgroundGradient"
                                               Grid.RowSpan="2"
                                               Grid.ColumnSpan="2"
                                               Opacity="0"
                                               Stretch="Fill">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                                <GradientStop Offset="0.015" Color="#FFFFFFFF" />
                                                <GradientStop Offset="0.375" Color="#F9FFFFFF" />
                                                <GradientStop Offset="0.6" Color="#E5FFFFFF" />
                                                <GradientStop Offset="1" Color="#C6FFFFFF" />
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <ContentPresenter Margin="4,4,5,4" VerticalAlignment="Center" />
                                    <Rectangle Grid.RowSpan="2"
                                               Grid.Column="2"
                                               Width="1"
                                               VerticalAlignment="Stretch"
                                               Fill="#FFAAAAAA"
                                               Visibility="Visible" />
                                    <Path x:Name="SortIcon"
                                          Grid.Column="1"
                                          Width="8"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Data="F1 M -5.215,0.0L 5.215,0.0L 0,6.099L -5.215,0.0 Z "
                                          Fill="#7FFFFFFF"
                                          Opacity="0"
                                          RenderTransformOrigin=".5,.5"
                                          Stretch="Uniform">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX=".9" ScaleY=".9" />
                                                <RotateTransform x:Name="SortIconTransform" />
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="DropLocationIndicatorStyle">
            <Setter.Value>
                <Style TargetType="Control">
                    <Setter Property="Background" Value="#FF3F4346" />
                    <Setter Property="Width" Value="2" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Control">
                                <Rectangle Width="{TemplateBinding Width}"
                                           Height="{TemplateBinding Height}"
                                           Fill="{TemplateBinding Background}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="GridLinesVisibility" Value="Vertical" />
        <Setter Property="HorizontalGridLinesBrush" Value="#FFC9CACA" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="VerticalGridLinesBrush" Value="#FFDBDCDC" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:DataGrid">
                    <Border BorderBrush="{DynamicResource DarkBorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">

                        <ScrollViewer Name="DG_ScrollViewer2"
                                      Background="{StaticResource LightBrush}"
                                      Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">

                                    <Grid x:Name="Root" Background="{TemplateBinding Background}">
                                        <Grid.Resources>

                                            <ControlTemplate x:Key="TopLeftHeaderTemplate" TargetType="primitives:DataGridColumnHeader">
                                                <Grid x:Name="Root">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <Border Grid.RowSpan="2"
                                                            Background="#FF1F3B53"
                                                            BorderBrush="#FFC9CACA"
                                                            BorderThickness="0,0,1,0">
                                                        <Rectangle Stretch="Fill" StrokeThickness="1">
                                                            <Rectangle.Fill>
                                                                <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                                                    <GradientStop Offset="0.015" Color="#FFFFFFFF" />
                                                                    <GradientStop Offset="0.375" Color="#F9FFFFFF" />
                                                                    <GradientStop Offset="0.6" Color="#E5FFFFFF" />
                                                                    <GradientStop Offset="1" Color="#C6FFFFFF" />
                                                                </LinearGradientBrush>
                                                            </Rectangle.Fill>
                                                        </Rectangle>
                                                    </Border>
                                                    <Rectangle Grid.RowSpan="2"
                                                               Width="Auto"
                                                               Height="1"
                                                               VerticalAlignment="Bottom"
                                                               Fill="#FFDBDCDC"
                                                               StrokeThickness="1" />
                                                </Grid>
                                            </ControlTemplate>

                                            <ControlTemplate x:Key="TopRightHeaderTemplate" TargetType="primitives:DataGridColumnHeader">
                                                <Grid x:Name="RootElement">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <Border Grid.RowSpan="2"
                                                            Background="#FF1F3B53"
                                                            BorderBrush="#FFC9CACA"
                                                            BorderThickness="1,0,0,0">
                                                        <Rectangle Stretch="Fill">
                                                            <Rectangle.Fill>
                                                                <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                                                    <GradientStop Offset="0.015" Color="#FFFFFFFF" />
                                                                    <GradientStop Offset="0.375" Color="#F9FFFFFF" />
                                                                    <GradientStop Offset="0.6" Color="#E5FFFFFF" />
                                                                    <GradientStop Offset="1" Color="#C6FFFFFF" />
                                                                </LinearGradientBrush>
                                                            </Rectangle.Fill>
                                                        </Rectangle>
                                                    </Border>
                                                </Grid>
                                            </ControlTemplate>

                                            <ControlTemplate x:Key="SelectAllButtonTemplate" TargetType="{x:Type Button}">
                                                <Grid>
                                                    <Rectangle x:Name="Border"
                                                               Fill="{StaticResource NormalBrush}"
                                                               SnapsToDevicePixels="True" />
                                                    <Polygon x:Name="Arrow"
                                                             Margin="8,8,3,3"
                                                             HorizontalAlignment="Right"
                                                             VerticalAlignment="Bottom"
                                                             Fill="{StaticResource TextBrush}"
                                                             Opacity="1"
                                                             Points="0,10 10,10 10,0"
                                                             Stretch="Uniform" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="Border" Property="Stroke" Value="{StaticResource HoverBrush}" />
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter TargetName="Border" Property="Fill" Value="{StaticResource HoverBrush}" />
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>

                                        </Grid.Resources>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <!--  Left Column Header Corner  -->
                                        <Button Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:DataGrid}},
                                                                Path=CellsPanelHorizontalOffset}"
                                                Command="{x:Static controls:DataGrid.SelectAllCommand}"
                                                Focusable="false"
                                                Template="{StaticResource SelectAllButtonTemplate}"
                                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:DataGrid}},
                                                                     Path=HeadersVisibility,
                                                                     Converter={x:Static controls:DataGrid.HeadersVisibilityConverter},
                                                                     ConverterParameter={x:Static controls:DataGridHeadersVisibility.All}}" />

                                        <primitives:DataGridColumnHeadersPresenter x:Name="ColumnHeadersPresenter" Grid.Column="1" />

                                        <!--  <primitives:DataGridColumnHeader x:Name="TopRightCornerHeader" Template="{StaticResource TopRightHeaderTemplate}" Grid.Column="2" />  -->

                                        <Rectangle x:Name="TopRightCornerHeader"
                                                   Grid.Column="2"
                                                   Fill="{StaticResource NormalBrush}" />

                                        <Rectangle x:Name="ColumnHeadersAndRowsSeparator"
                                                   Grid.ColumnSpan="3"
                                                   Width="Auto"
                                                   Height="1"
                                                   VerticalAlignment="Bottom"
                                                   Fill="#FFDBDCDC"
                                                   StrokeThickness="1" />

                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                                Grid.Row="1"
                                                                Grid.ColumnSpan="2"
                                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                                Content="{TemplateBinding Content}" />

                                        <Rectangle x:Name="BottomRightCorner"
                                                   Grid.Row="2"
                                                   Grid.Column="2"
                                                   Fill="{StaticResource NormalBrush}" />
                                        <!--  "Fill="#FFE9EEF4"  -->

                                        <Rectangle x:Name="BottomLeftCorner"
                                                   Grid.Row="2"
                                                   Grid.ColumnSpan="1"
                                                   Fill="{StaticResource NormalBrush}" />
                                        <!--  Fill="#FFE9EEF4"  -->

                                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                                   Grid.Row="1"
                                                   Grid.Column="2"
                                                   Width="20"
                                                   Maximum="{TemplateBinding ScrollableHeight}"
                                                   Orientation="Vertical"
                                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                   Value="{Binding Path=VerticalOffset,
                                                                   RelativeSource={RelativeSource TemplatedParent},
                                                                   Mode=OneWay}" />

                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <!--  <Rectangle x:Name="FrozenColumnScrollBarSpacer" />  -->

                                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                                       Grid.Column="1"
                                                       Height="20"
                                                       Maximum="{TemplateBinding ScrollableWidth}"
                                                       Orientation="Horizontal"
                                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                       Value="{Binding Path=HorizontalOffset,
                                                                       Mode=OneWay,
                                                                       RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>

                                    </Grid>

                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
    </Style>

    <!--  End Expression Light Datagrid  -->





    <!--  ItemsControl  -->
    <Style TargetType="{x:Type ItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border BorderBrush="{DynamicResource DarkBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2">
                        <ScrollViewer Background="{DynamicResource LightBrush}"
                                      Foreground="{DynamicResource DisabledTextBrush}"
                                      Padding="2"
                                      VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NuclearButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2"
                                   Stroke="#60000000"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Image}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type UIElement}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                <Setter Property="Opacity" Value="0.3" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="PressedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="PressedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="FocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="FocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>

                    </ControlTemplate.Resources>
                    <Grid x:Name="Grid">
                        <Border x:Name="Background"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3" />
                        <Border x:Name="HoverBorder"
                                Background="{StaticResource HoverBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="0" />
                        <Border x:Name="HoverShineBorder"
                                Background="{StaticResource HoverShineBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="0" />
                        <Border x:Name="PressedBorder"
                                Background="{StaticResource PressedBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="0" />
                        <Border x:Name="ShineBorder"
                                Background="{StaticResource ShineBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="1" />
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                        <Border x:Name="FocusVisualElement"
                                Margin="1,1,1,1"
                                BorderBrush="{StaticResource HoverShineBrush}"
                                BorderThickness="1"
                                CornerRadius="3,3,3,3"
                                IsHitTestVisible="false"
                                Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter TargetName="ShineBorder" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocussedOff_BeginStoryboard" Storyboard="{StaticResource FocussedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="ShineBorder" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter TargetName="Grid" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0"
                                   Stroke="#60000000"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0"
                                   Stroke="#60000000"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="BackgroundOverlay"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="BackgroundOverlay"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedTrue">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedFalse">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="IndeterminateOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="IndeterminateOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentFocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentFocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <BulletDecorator x:Name="bulletDecorator" Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="16" Height="16">
                                <Rectangle x:Name="Background"
                                           Width="14"
                                           Height="14"
                                           Margin="1"
                                           Fill="{TemplateBinding Background}"
                                           Stroke="{TemplateBinding BorderBrush}"
                                           StrokeThickness="{TemplateBinding BorderThickness}" />
                                <Rectangle x:Name="BackgroundOverlay"
                                           Width="14"
                                           Height="14"
                                           Margin="1"
                                           Fill="{x:Null}"
                                           Opacity="0"
                                           Stroke="{StaticResource HoverBrush}"
                                           StrokeThickness="2" />
                                <Rectangle x:Name="PressedRectangle"
                                           Width="16"
                                           Height="16"
                                           IsHitTestVisible="false"
                                           Opacity="0"
                                           Stroke="{StaticResource HoverBrush}"
                                           StrokeThickness="1" />
                                <Path x:Name="CheckIcon"
                                      Width="10.5"
                                      Height="10"
                                      Margin="1,1,0,1.5"
                                      Data="M102.03442,598.79645 L105.22962,597.78918 L106.78825,600.42358 C106.78825,600.42358 108.51028,595.74304 110.21724,593.60419 C112.00967,591.35822 114.89314,591.42316 114.89314,591.42316 C114.89314,591.42316 112.67844,593.42645 111.93174,594.44464 C110.7449,596.06293 107.15683,604.13837 107.15683,604.13837 z"
                                      Fill="{StaticResource GlyphBrush}"
                                      Opacity="0"
                                      Stretch="Fill" />
                                <Rectangle x:Name="IndeterminateIcon"
                                           Width="10"
                                           Height="8"
                                           Fill="{StaticResource GlyphBrush}"
                                           Opacity="0" />
                                <Rectangle x:Name="DisabledVisualElement"
                                           Width="14"
                                           Height="14"
                                           Fill="{StaticResource DisabledBackgroundBrush}"
                                           Opacity="0" />
                                <Rectangle x:Name="ContentFocusVisualElement"
                                           Width="16"
                                           Height="16"
                                           IsHitTestVisible="false"
                                           Opacity="0"
                                           Stroke="{StaticResource HoverShineBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="ShineRectangle"
                                           Width="14"
                                           Height="12"
                                           Margin="2,2,2,2"
                                           Fill="{StaticResource ShineBrush}"
                                           IsHitTestVisible="false"
                                           Opacity="1"
                                           Stroke="{x:Null}"
                                           StrokeThickness="1" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="5,0,0,0"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocussedOff_BeginStoryboard" Storyboard="{StaticResource FocussedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocussedOn_BeginStoryboard" Storyboard="{StaticResource FocussedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsThreeState" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="ThreeStateOn_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="ThreeStateOff_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="{x:Null}" />
                                <Condition Property="IsThreeState" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="ThreeStateOn1_BeginStoryboard" Storyboard="{StaticResource IndeterminateOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="ThreeStateOff1_BeginStoryboard" Storyboard="{StaticResource IndeterminateOff}" />
                            </MultiTrigger.ExitActions>
                            <Setter TargetName="CheckIcon" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="CheckedTrue_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedFalse}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Background" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter TargetName="bulletDecorator" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="BackgroundOverlay"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="BackgroundOverlay"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedEllipse"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedEllipse"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentFocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentFocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <BulletDecorator x:Name="bulletDecorator" Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="16" Height="16">
                                <Ellipse x:Name="Background"
                                         Width="14"
                                         Height="14"
                                         Margin="1"
                                         Fill="{TemplateBinding Background}"
                                         Stroke="{TemplateBinding BorderBrush}"
                                         StrokeThickness="{TemplateBinding BorderThickness}" />
                                <Ellipse x:Name="BackgroundOverlay"
                                         Width="14"
                                         Height="14"
                                         Margin="1"
                                         Opacity="0"
                                         Stroke="{StaticResource HoverBrush}"
                                         StrokeThickness="2" />
                                <Ellipse x:Name="PressedEllipse"
                                         Width="14"
                                         Height="14"
                                         Margin="1"
                                         Opacity="0"
                                         Stroke="{StaticResource HoverBrush}"
                                         StrokeThickness="{TemplateBinding BorderThickness}" />
                                <Ellipse x:Name="CheckIcon"
                                         Width="6"
                                         Height="6"
                                         Fill="{StaticResource GlyphBrush}"
                                         Opacity="0" />
                                <Ellipse x:Name="DisabledVisualElement"
                                         Width="14"
                                         Height="14"
                                         Fill="{StaticResource DisabledBackgroundBrush}"
                                         Opacity="0" />
                                <Ellipse x:Name="ContentFocusVisualElement"
                                         Width="16"
                                         Height="16"
                                         IsHitTestVisible="false"
                                         Opacity="0"
                                         Stroke="{StaticResource HoverShineBrush}"
                                         StrokeThickness="1" />
                                <Ellipse x:Name="ShineEllipse"
                                         Width="12"
                                         Height="12"
                                         Margin="2,2,2,2"
                                         Fill="{StaticResource ShineBrush}"
                                         Stroke="{x:Null}"
                                         StrokeThickness="{TemplateBinding BorderThickness}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="5,0,0,0" RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocussedOff_BeginStoryboard" Storyboard="{StaticResource FocussedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocussedOn_BeginStoryboard" Storyboard="{StaticResource FocussedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">

                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsChecked" Value="True" />
                        <Trigger Property="IsMouseOver" Value="true">

                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">

                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Background" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter TargetName="bulletDecorator" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers />
    </Style>

    <Style BasedOn="{x:Null}"
           TargetType="{x:Type RepeatButton}"
           d:IsControlPart="True">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentPresenter"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.8" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentPresenter"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentPresenter"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="ContentPresenter"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="1" />
                        <ContentPresenter x:Name="ContentPresenter"
                                          Height="Auto"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Opacity="0.3" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true" />
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value="0.1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NuclearThumbStyle"
           BasedOn="{x:Null}"
           TargetType="{x:Type Thumb}"
           d:IsControlPart="True">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.8" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Grid" Margin="0,0,0,0">
                        <Rectangle x:Name="HoverRectangle"
                                   Width="Auto"
                                   Height="Auto"
                                   MinHeight="10"
                                   Margin="4.5,-2,4.5,-2"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   Opacity="0.3"
                                   RadiusX="3"
                                   RadiusY="4"
                                   Stroke="{x:Null}">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="PressedRectangle"
                                   Width="Auto"
                                   Height="Auto"
                                   MinHeight="10"
                                   Margin="4.5,-2,4.5,-2"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   Opacity="0.3"
                                   RadiusX="3"
                                   RadiusY="4"
                                   Stroke="{x:Null}">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Grid" Property="Opacity" Value="0.1" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NuclearScrollRepeatButtonStyle"
           TargetType="{x:Type RepeatButton}"
           d:IsControlPart="True">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}"
                                   Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                          Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                          Background="{DynamicResource NormalBrush}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="DecreaseRepeat"
                                      Background="{x:Null}"
                                      BorderBrush="{x:Null}"
                                      Command="ScrollBar.LineUpCommand"
                                      Foreground="{x:Null}">
                            <Grid Margin="0,0,0,0">
                                <Path x:Name="DecreaseArrow"
                                      Height="Auto"
                                      Margin="4.742,3.997,4.946,5.327"
                                      VerticalAlignment="Stretch"
                                      Data="M5.2422477,11.132184 L11.5544,11.132184 8.6412958,4.4969033 z"
                                      Fill="{DynamicResource GlyphBrush}"
                                      Stretch="Fill"
                                      Stroke="{DynamicResource GlyphBrush}"
                                      StrokeThickness="1" />
                            </Grid>
                        </RepeatButton>
                        <Track x:Name="PART_Track"
                               Grid.Row="1"
                               IsDirectionReversed="true"
                               Orientation="Vertical">
                            <Track.Thumb>
                                <Thumb Background="{x:Null}"
                                       Foreground="{x:Null}"
                                       Style="{DynamicResource NuclearThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                              Command="ScrollBar.PageDownCommand"
                                              Style="{DynamicResource NuclearScrollRepeatButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                              Command="ScrollBar.PageUpCommand"
                                              Style="{DynamicResource NuclearScrollRepeatButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton x:Name="IncreaseRepeat"
                                      Grid.Row="2"
                                      Command="ScrollBar.LineDownCommand">
                            <Grid>
                                <Path x:Name="IncreaseArrow"
                                      Height="Auto"
                                      Margin="4.742,3.997,4.946,5.327"
                                      VerticalAlignment="Stretch"
                                      Data="M5.2422477,11.132184 L11.5544,11.132184 8.6412958,4.4969033 z"
                                      Fill="{DynamicResource GlyphBrush}"
                                      RenderTransformOrigin="0.5,0.5"
                                      Stretch="Fill"
                                      Stroke="{DynamicResource GlyphBrush}"
                                      StrokeThickness="1">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="180" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                            <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
                            <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NuclearScrollViewer"
           BasedOn="{x:Null}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Row="0"
                                                Grid.Column="0"
                                                Margin="{TemplateBinding Padding}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Row="1"
                                   Grid.Column="0"
                                   AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0"
                                   Orientation="Horizontal"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding Path=HorizontalOffset,
                                                   Mode=OneWay,
                                                   RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   AutomationProperties.AutomationId="VerticalScrollBar"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0"
                                   Orientation="Vertical"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding Path=VerticalOffset,
                                                   Mode=OneWay,
                                                   RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Offset="0" Color="#FFA3AEB9" />
                    <GradientStop Offset="0.375" Color="#FF8399A9" />
                    <GradientStop Offset="0.375" Color="#FF718597" />
                    <GradientStop Offset="1" Color="#FF617584" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{DynamicResource ControlBackgroundBrush}"
                                BorderBrush="{DynamicResource DarkBorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <ScrollViewer Margin="1"
                                      Background="{x:Null}"
                                      Focusable="false"
                                      Style="{DynamicResource NuclearScrollViewer}">
                            <StackPanel Margin="1,1,1,1" IsItemsHost="true" />
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxItemStyle"
           TargetType="{x:Type ListBoxItem}"
           d:IsControlPart="True">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="{DynamicResource DisabledTextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="FocussedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="FocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="FocusVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="1,1,1,1" SnapsToDevicePixels="true">
                        <Rectangle x:Name="Background"
                                   Fill="{StaticResource NormalBrush}"
                                   IsHitTestVisible="False"
                                   Opacity="0.25"
                                   RadiusX="1"
                                   RadiusY="1" />
                        <Rectangle x:Name="HoverRectangle"
                                   Fill="{StaticResource NormalBrush}"
                                   IsHitTestVisible="False"
                                   Opacity="0"
                                   RadiusX="1"
                                   RadiusY="1" />
                        <Rectangle x:Name="SelectedRectangle"
                                   Fill="{StaticResource SelectedBackgroundBrush}"
                                   IsHitTestVisible="False"
                                   Opacity="0"
                                   RadiusX="1"
                                   RadiusY="1" />
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="5,2,0,2"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <Rectangle x:Name="FocusVisualElement"
                                   Opacity="0"
                                   RadiusX="1"
                                   RadiusY="1"
                                   Stroke="{StaticResource NormalBrush}"
                                   StrokeThickness="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocussedOff_BeginStoryboard" Storyboard="{StaticResource FocussedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocussedOn_BeginStoryboard" Storyboard="{StaticResource FocussedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">

                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>

                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </MultiTrigger.ExitActions>

                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0"
                                   SnapsToDevicePixels="true"
                                   Stroke="Black"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Background="{DynamicResource NormalBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            BorderThickness="1,1,1,1"
                            CornerRadius="2,2,2,2"
                            Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="Rectangle"
                                       Margin="2,2,2,2"
                                       Fill="{DynamicResource NormalBrush}"
                                       RadiusX="1"
                                       RadiusY="1"
                                       Stroke="{DynamicResource NormalBorderBrush}"
                                       StrokeThickness="1" />
                            <Rectangle x:Name="ShineRectangle"
                                       Margin="2,2,2,2"
                                       Fill="{DynamicResource ShineBrush}"
                                       RadiusX="1"
                                       RadiusY="1"
                                       Stroke="{DynamicResource NormalBorderBrush}"
                                       StrokeThickness="1" />
                            <Rectangle x:Name="HoverRectangle"
                                       Margin="2,2,2,2"
                                       Fill="{DynamicResource HoverBrush}"
                                       Opacity="0"
                                       RadiusX="1"
                                       RadiusY="1"
                                       Stroke="{DynamicResource NormalBorderBrush}"
                                       StrokeThickness="1" />
                            <Rectangle x:Name="HoverShineRectangle"
                                       Margin="2,2,2,2"
                                       Fill="{DynamicResource HoverShineBrush}"
                                       Opacity="0"
                                       RadiusX="1"
                                       RadiusY="1"
                                       Stroke="{DynamicResource NormalBorderBrush}"
                                       StrokeThickness="1" />
                            <Rectangle x:Name="PressedRectangle"
                                       Margin="2,2,2,2"
                                       Fill="{DynamicResource PressedBrush}"
                                       Opacity="0"
                                       RadiusX="1"
                                       RadiusY="1"
                                       Stroke="{DynamicResource PressedBorderBrush}"
                                       StrokeThickness="1" />
                            <Path x:Name="Up_Arrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 0 0 L 4 4 L 8 0 Z"
                                  Fill="{DynamicResource GlyphBrush}" />
                            <Path x:Name="Down_Arrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 0 4 L 4 0 L 8 4 Z"
                                  Fill="{DynamicResource GlyphBrush}"
                                  Visibility="Collapsed" />
                            <ContentPresenter Grid.Column="1"
                                              Margin="4,2,0,2"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Background="{DynamicResource NormalBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            BorderThickness="1,1,1,1"
                            CornerRadius="2,2,2,2"
                            Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle x:Name="Rectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource NormalBrush}"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="ShineRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource ShineBrush}"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="HoverRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource HoverBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="HoverShineRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource HoverShineBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="PressedRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource PressedBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource PressedBorderBrush}"
                                           StrokeThickness="1" />
                                <Path x:Name="Up_Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 0 0 L 4 4 L 8 0 Z"
                                      Fill="{DynamicResource GlyphBrush}" />
                                <Path x:Name="Down_Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 0 4 L 4 0 L 8 4 Z"
                                      Fill="{DynamicResource GlyphBrush}"
                                      Visibility="Collapsed" />
                            </Grid>
                            <ContentPresenter Grid.Row="1"
                                              Margin="2,4,4,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Top"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True">
                                <ContentPresenter.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Background="{DynamicResource NormalBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            BorderThickness="1,1,1,1"
                            CornerRadius="2,2,2,2"
                            Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle x:Name="Rectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource NormalBrush}"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="ShineRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource ShineBrush}"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="HoverRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource HoverBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="HoverShineRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource HoverShineBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="PressedRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource PressedBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource PressedBorderBrush}"
                                           StrokeThickness="1" />
                                <Path x:Name="Up_Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 0 0 L 4 4 L 8 0 Z"
                                      Fill="{DynamicResource GlyphBrush}" />
                                <Path x:Name="Down_Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 0 4 L 4 0 L 8 4 Z"
                                      Fill="{DynamicResource GlyphBrush}"
                                      Visibility="Collapsed" />
                            </Grid>
                            <ContentPresenter Grid.Column="1"
                                              Margin="4,2,0,2"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Background="{DynamicResource NormalBrush}"
                            BorderBrush="{DynamicResource NormalBorderBrush}"
                            BorderThickness="1,1,1,1"
                            CornerRadius="2,2,2,2"
                            Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle x:Name="Rectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource NormalBrush}"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="ShineRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource ShineBrush}"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="HoverRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource HoverBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="HoverShineRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource HoverShineBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource NormalBorderBrush}"
                                           StrokeThickness="1" />
                                <Rectangle x:Name="PressedRectangle"
                                           Margin="2,2,2,2"
                                           Fill="{DynamicResource PressedBrush}"
                                           Opacity="0"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Stroke="{DynamicResource PressedBorderBrush}"
                                           StrokeThickness="1" />
                                <Path x:Name="Up_Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 0 0 L 4 4 L 8 0 Z"
                                      Fill="{DynamicResource GlyphBrush}" />
                                <Path x:Name="Down_Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 0 4 L 4 0 L 8 4 Z"
                                      Fill="{DynamicResource GlyphBrush}"
                                      Visibility="Collapsed" />
                            </Grid>
                            <ContentPresenter Grid.Row="1"
                                              Margin="4,4,2,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Top"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True">
                                <ContentPresenter.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,1,1,1"
                            CornerRadius="3"
                            SnapsToDevicePixels="true">
                        <DockPanel x:Name="dockPanel">
                            <ToggleButton x:Name="HeaderSite"
                                          MinWidth="0"
                                          MinHeight="0"
                                          Margin="1,1,1,0"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          DockPanel.Dock="Top"
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsExpanded,
                                                              Mode=TwoWay,
                                                              RelativeSource={RelativeSource TemplatedParent}}"
                                          Padding="{TemplateBinding Padding}"
                                          Style="{StaticResource ExpanderDownHeaderStyle}" />
                            <Border x:Name="border"
                                    Margin="1,1,1,1"
                                    Background="{DynamicResource ShadeBrush}"
                                    BorderBrush="{DynamicResource NormalBorderBrush}"
                                    BorderThickness="1,0,1,1"
                                    CornerRadius="3,3,3,3"
                                    Visibility="Collapsed">
                                <ContentPresenter x:Name="ExpandSite"
                                                  Margin="1,1,1,1"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  DockPanel.Dock="Bottom"
                                                  Focusable="false" />
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="border" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Down" />
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderRightHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderUpHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderLeftHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ComboBoxToggleButton  -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                               Storyboard.TargetName="HoverBorder"
                                               Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                               Storyboard.TargetName="HoverShineBorder"
                                               Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                               Storyboard.TargetName="HoverTextRectangle"
                                               Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                               Storyboard.TargetName="HoverShineBorder"
                                               Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                               Storyboard.TargetName="HoverBorder"
                                               Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                               Storyboard.TargetName="HoverTextRectangle"
                                               Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid x:Name="grid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Rectangle"
                       Grid.ColumnSpan="2"
                       Width="Auto"
                       Height="Auto"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Stretch"
                       Fill="{DynamicResource LightBrush}"
                       RadiusX="3"
                       RadiusY="3"
                       Stroke="{TemplateBinding BorderBrush}" />
            <Rectangle x:Name="TextRectangle"
                       Grid.Column="0"
                       Width="Auto"
                       Height="Auto"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Stretch"
                       Fill="{TemplateBinding Background}"
                       RadiusX="3"
                       RadiusY="3"
                       Stroke="{TemplateBinding BorderBrush}" />
            <Rectangle x:Name="HoverTextRectangle"
                       Grid.Column="0"
                       Width="Auto"
                       Height="Auto"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Stretch"
                       Fill="{TemplateBinding Background}"
                       Opacity="0"
                       RadiusX="3"
                       RadiusY="3"
                       Stroke="{DynamicResource GlyphBrush}" />
            <Border x:Name="border"
                    Grid.Column="1"
                    Margin="2,2,2,2"
                    Background="{DynamicResource NormalBrush}"
                    CornerRadius="3,3,3,3" />
            <Border x:Name="HoverBorder"
                    Grid.Column="1"
                    Margin="2,2,2,2"
                    Background="{DynamicResource HoverBrush}"
                    CornerRadius="3,3,3,3"
                    Opacity="0" />
            <Border x:Name="HoverShineBorder"
                    Grid.Column="1"
                    Margin="2,2,2,2"
                    Background="{DynamicResource HoverShineBrush}"
                    CornerRadius="3,3,3,3"
                    Opacity="0" />
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  Height="7"
                  Margin="5,0,5,0"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0.5,0.5 L3,6.5 5.5,0.5"
                  Fill="{x:Null}"
                  Stretch="Fill"
                  Stroke="{DynamicResource GlyphBrush}"
                  StrokeThickness="2" />
            <Border x:Name="ShineBorder"
                    Grid.Column="1"
                    Margin="2,2,2,2"
                    Background="{DynamicResource ShineBrush}"
                    CornerRadius="3,3,3,3" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsChecked" Value="true" />
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter TargetName="border" Property="Background" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter TargetName="TextRectangle" Property="Fill" Value="{DynamicResource LightBrush}" />
                <Setter TargetName="grid" Property="Opacity" Value="0.8" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  ComboBoxTextBox  -->
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" />
        <!--  Background="{TemplateBinding Background}"  -->
        <ControlTemplate.Triggers />
    </ControlTemplate>

    <!--  HT  -->





    <!--  ComboBox  -->
    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />

        <!--  <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />  -->
        <!--  <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>  -->
        <!--  <Setter Property="BorderBrush" Value="#FF000000"/>  -->

        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="grid">
                        <ToggleButton x:Name="ToggleButton"
                                      Grid.Column="2"
                                      Background="{DynamicResource ControlBackgroundBrush}"
                                      BorderBrush="{DynamicResource DarkBorderBrush}"
                                      ClickMode="Press"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen,
                                                          Mode=TwoWay,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      Template="{DynamicResource ComboBoxToggleButton}" />
                        <ContentPresenter x:Name="ContentSite"
                                          Margin="3,3,23,3"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="3,3,23,3"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Background="{DynamicResource ControlBackgroundBrush}"
                                 BorderBrush="{DynamicResource NormalBorderBrush}"
                                 Focusable="True"
                                 Foreground="{DynamicResource TextBrush}"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Style="{x:Null}"
                                 Template="{DynamicResource ComboBoxTextBox}"
                                 Visibility="Hidden" />
                        <Popup x:Name="Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown"
                                  Width="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource ControlBackgroundBrush}"
                                        CornerRadius="3,3,3,3" />
                                <ScrollViewer Margin="4,6,4,6"
                                              CanContentScroll="True"
                                              Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                                              HorizontalScrollBarVisibility="Auto"
                                              SnapsToDevicePixels="True"
                                              Style="{DynamicResource NuclearScrollViewer}"
                                              VerticalScrollBarVisibility="Auto">
                                    <VirtualizingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                            <!--
                                <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                                <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
                            -->
                            <!--  "{DynamicResource DisabledBackgroundBrush}"/>  -->
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <!--  AM Start  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <!--  AM End  -->
                        <!--  HT Start  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource WarningTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Warning" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ErrorTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Error" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!--  HT End  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Type TextBox  -->
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                Opacity="1">
                            <Grid>
                                <Border BorderThickness="1">
                                    <ScrollViewer x:Name="PART_ContentHost"
                                                  Margin="0"
                                                  Style="{DynamicResource NuclearScrollViewer}" />
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBorder"
                                BorderBrush="{StaticResource GlyphBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />
                        <Border x:Name="FocusVisualElement"
                                BorderBrush="{StaticResource HoverShineBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                        </Trigger>
                        <!--  AM Start  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <!--  AM End  -->
                        <!--  HT Start  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource WarningTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Warning" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ErrorTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Error" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!--  HT End  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkBorderBrush}" />
    </Style>






    <!--  ComboBox  -->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />

        <!--  <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />  -->
        <!--  <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>  -->
        <!--  <Setter Property="BorderBrush" Value="#FF000000"/>  -->

        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="grid">
                        <ToggleButton x:Name="ToggleButton"
                                      Grid.Column="2"
                                      Background="{DynamicResource ControlBackgroundBrush}"
                                      BorderBrush="{DynamicResource DarkBorderBrush}"
                                      ClickMode="Press"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen,
                                                          Mode=TwoWay,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      Template="{DynamicResource ComboBoxToggleButton}" />
                        <ContentPresenter x:Name="ContentSite"
                                          Margin="3,3,23,3"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="3,3,23,3"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Background="{DynamicResource ControlBackgroundBrush}"
                                 BorderBrush="{DynamicResource NormalBorderBrush}"
                                 Focusable="True"
                                 Foreground="{DynamicResource TextBrush}"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Style="{x:Null}"
                                 Template="{DynamicResource ComboBoxTextBox}"
                                 Visibility="Hidden" />
                        <Popup x:Name="Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown"
                                  Width="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource ControlBackgroundBrush}"
                                        CornerRadius="3,3,3,3" />
                                <ScrollViewer Margin="4,6,4,6"
                                              CanContentScroll="True"
                                              Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                                              HorizontalScrollBarVisibility="Auto"
                                              SnapsToDevicePixels="True"
                                              Style="{DynamicResource NuclearScrollViewer}"
                                              VerticalScrollBarVisibility="Auto">
                                    <VirtualizingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                            <!--
                                <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                                <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
                            -->
                            <!--  "{DynamicResource DisabledBackgroundBrush}"/>  -->
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <!--  AM Start  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <!--  AM End  -->
                        <!--  HT Start  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource WarningTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Warning" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ErrorTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Error" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!--  HT End  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}" d:IsControlPart="True">
        <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}, Path=ActualWidth}"/>
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
        <ControlTemplate.Resources>
        <Storyboard x:Key="HoverOn">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
        Storyboard.TargetName="HoverRectangle"
        Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="HoverOff">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
        Storyboard.TargetName="HoverRectangle"
        Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="SelectedOn">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
        Storyboard.TargetName="SelectedRectangle"
        Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="SelectedOff">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
        Storyboard.TargetName="SelectedRectangle"
        Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        
        </ControlTemplate.Resources>
        <Grid Margin="1,1,1,1" SnapsToDevicePixels="true">
        <Rectangle x:Name="Background"
        Fill="{DynamicResource NormalBrush}"
        IsHitTestVisible="False"
        Opacity="0.25"
        RadiusX="1"
        RadiusY="1" />
        <Rectangle x:Name="HoverRectangle"
        Fill="{StaticResource NormalBrush}"
        IsHitTestVisible="False"
        Opacity="0"
        RadiusX="1"
        RadiusY="1" />
        <Rectangle x:Name="SelectedRectangle"
        Fill="{StaticResource SelectedBackgroundBrush}"
        IsHitTestVisible="False"
        Opacity="0"
        RadiusX="1"
        RadiusY="1" />
        <ContentPresenter x:Name="contentPresenter"
        Margin="4,2,2,2"
        VerticalAlignment="Center" />
        <Rectangle x:Name="FocusVisualElement"
        RadiusX="1"
        RadiusY="1"
        Stroke="{StaticResource HoverShineBrush}"
        StrokeThickness="1"
        Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
        <Trigger Property="IsHighlighted" Value="true">
        <Trigger.ExitActions>
        <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
        </Trigger.EnterActions>
        
        </Trigger>
        <Trigger Property="IsMouseOver" Value="True">
        <Trigger.ExitActions>
        <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
        </Trigger.EnterActions>
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
    -->

    <Style TargetType="{x:Type ComboBoxItem}" d:IsControlPart="True">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectedRectangle"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>

                    </ControlTemplate.Resources>
                    <Grid Margin="1,1,1,1" SnapsToDevicePixels="true">
                        <Rectangle x:Name="Background"
                                   Fill="{StaticResource NormalBrush}"
                                   IsHitTestVisible="False"
                                   Opacity="0.25"
                                   RadiusX="1"
                                   RadiusY="1" />
                        <Rectangle x:Name="HoverRectangle"
                                   Fill="{StaticResource NormalBrush}"
                                   IsHitTestVisible="False"
                                   Opacity="0"
                                   RadiusX="1"
                                   RadiusY="1" />
                        <Rectangle x:Name="SelectedRectangle"
                                   Fill="{StaticResource SelectedBackgroundBrush}"
                                   IsHitTestVisible="False"
                                   Opacity="0"
                                   RadiusX="1"
                                   RadiusY="1" />
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="4,2,2,2"
                                          VerticalAlignment="Center" />
                        <Rectangle x:Name="FocusVisualElement"
                                   RadiusX="1"
                                   RadiusY="1"
                                   Stroke="{StaticResource HoverShineBrush}"
                                   StrokeThickness="1"
                                   Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ValueChangedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PART_Track"
                                                           Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="IndeterminateOn">
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                           Storyboard.TargetName="IndeterminateGradientFill"
                                                           Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.Transform).(TransformGroup.Children)[0].X">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                <SplineDoubleKeyFrame KeyTime="00:00:2.4" Value="145" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="PART_Track"
                                Background="{DynamicResource LightBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="0,0,0,0">
                            <Border.BitmapEffect>
                                <OuterGlowBitmapEffect GlowColor="{DynamicResource WhiteColor}"
                                                       GlowSize="3"
                                                       Opacity="0" />
                            </Border.BitmapEffect>
                        </Border>
                        <Border x:Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="0,0,0,0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                    <GradientStop Offset="0" Color="#B2FFFFFF" />
                                    <GradientStop Offset="0.15" Color="#C6FFFFFF" />
                                    <GradientStop Offset="0.275" Color="#D1FFFFFF" />
                                    <GradientStop Offset="0.4" Color="#C6FFFFFF" />
                                    <GradientStop Offset="0.65" Color="#BFFFFFFF" />
                                    <GradientStop Offset="0.75" Color="#A5FFFFFF" />
                                    <GradientStop Offset="0.85" Color="#91FFFFFF" />
                                    <GradientStop Offset="1" Color="#72FFFFFF" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Grid x:Name="IndeterminateRoot" Visibility="Collapsed">
                            <Rectangle x:Name="IndeterminateSolidFill"
                                       Margin="{TemplateBinding BorderThickness}"
                                       Fill="{DynamicResource ControlBackgroundBrush}"
                                       Opacity="1"
                                       RadiusX="2"
                                       RadiusY="2"
                                       RenderTransformOrigin="0.5,0.5"
                                       Stroke="#FF448DCA"
                                       StrokeThickness="0" />
                            <Rectangle x:Name="IndeterminateGradientFill"
                                       Margin="{TemplateBinding BorderThickness}"
                                       RadiusX="2"
                                       RadiusY="2"
                                       StrokeThickness="1">
                                <Rectangle.Fill>
                                    <LinearGradientBrush SpreadMethod="Repeat" StartPoint="0.401,-0.394" EndPoint="0.508,1.394">
                                        <GradientStop Color="#00FFFFFF" />
                                        <GradientStop Offset="1" Color="#FEA1A1A1" />
                                        <GradientStop Offset="0.517" Color="#00FEFEFE" />
                                        <GradientStop Offset="0.517" Color="#FEA1A1A1" />
                                        <LinearGradientBrush.Transform>
                                            <TransformGroup>
                                                <TranslateTransform X="0" />
                                            </TransformGroup>
                                        </LinearGradientBrush.Transform>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <Border x:Name="border"
                                Background="{DynamicResource DisabledBackgroundBrush}"
                                BorderBrush="{DynamicResource DisabledBorderBrush}"
                                BorderThickness="1,1,1,1"
                                Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.8" />
                        </Trigger>
                        <EventTrigger RoutedEvent="RangeBase.ValueChanged">
                            <BeginStoryboard Storyboard="{StaticResource ValueChangedOn}" />
                        </EventTrigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IndeterminateOn}" />
                            </Trigger.EnterActions>
                            <Setter TargetName="IndeterminateRoot" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Type TextBox  -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                Opacity="1">
                            <Grid>
                                <Border BorderThickness="1">
                                    <ScrollViewer x:Name="PART_ContentHost"
                                                  Margin="0"
                                                  Style="{DynamicResource NuclearScrollViewer}" />
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBorder"
                                BorderBrush="{StaticResource GlyphBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />
                        <Border x:Name="FocusVisualElement"
                                BorderBrush="{StaticResource HoverShineBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource LightBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                            <Setter TargetName="Border" Property="Opacity" Value="0.8" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource LightBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                            <Setter TargetName="Border" Property="Opacity" Value="0.8" />
                        </Trigger>
                        <!--  AM Start  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <!--  AM End  -->
                        <!--  HT Start  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource WarningTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Warning" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ErrorTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Error" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!--  HT End  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkBorderBrush}" />
    </Style>

    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                Opacity="1">
                            <Grid>
                                <Border BorderThickness="1">
                                    <ScrollViewer x:Name="PART_ContentHost"
                                                  Margin="0"
                                                  Style="{DynamicResource NuclearScrollViewer}" />
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBorder"
                                BorderBrush="{StaticResource GlyphBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />
                        <Border x:Name="FocusVisualElement"
                                BorderBrush="{StaticResource HoverShineBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkBorderBrush}" />
    </Style>

    <Style TargetType="{x:Type RichTextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RichTextBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                Opacity="1">
                            <Grid>
                                <Border BorderThickness="1">
                                    <ScrollViewer x:Name="PART_ContentHost"
                                                  Margin="0"
                                                  Style="{DynamicResource NuclearScrollViewer}" />
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBorder"
                                BorderBrush="{StaticResource GlyphBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />
                        <Border x:Name="FocusVisualElement"
                                BorderBrush="{StaticResource HoverShineBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,2,2"
                                IsHitTestVisible="False"
                                Opacity="0" />


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkBorderBrush}" />
    </Style>

    <Style x:Key="TabLabel" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter Margin="4,2,4,2"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false" />
                        <!--  AM Start  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <!--  AM End  -->
                        <!--  HT Start  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource LabelWarningTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Warning" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource LabelErrorTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Error" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!--  HT End  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

	<Style TargetType="{x:Type Hyperlink}">
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="Red" />
			</Trigger>
		</Style.Triggers>
		<Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
		<Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
	</Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
					        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <!--  AM Start  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <!--  AM End  -->
                        <!--  HT Start  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource LabelWarningTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Warning" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource LabelErrorTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Error" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!--  HT End  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style x:Key="LabelReverseStyle" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource BlackColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkBorderBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border x:Name="Border"
                                Margin="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <StackPanel Background="{TemplateBinding Background}"
                                    ClipToBounds="True"
                                    IsItemsHost="True"
                                    Orientation="Horizontal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DropShadowBitmapEffect x:Key="PopupDropShadow"
                            ShadowDepth="1.5"
                            Softness="0.15" />

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HighlightedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HightlightedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="Border"
                            Margin="3,2,3,2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0,0,0,0">
                        <Grid Margin="0,0,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"
                                                  MinWidth="17"
                                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="HoverBorder"
                                    Grid.Column="0"
                                    Grid.ColumnSpan="4"
                                    Background="{DynamicResource HoverBrush}"
                                    CornerRadius="1,1,1,1"
                                    Opacity="0" />
                            <Border x:Name="HoverShineBorder"
                                    Grid.ColumnSpan="4"
                                    Background="{DynamicResource HoverShineBrush}"
                                    CornerRadius="1,1,1,1"
                                    Opacity="0" />
                            <ContentPresenter x:Name="Icon"
                                              Margin="4,0,6,0"
                                              VerticalAlignment="Center"
                                              ContentSource="Icon" />
                            <Grid x:Name="GlyphPanel"
                                  Margin="4,0,6,0"
                                  VerticalAlignment="Center"
                                  Visibility="Hidden">
                                <Path x:Name="GlyphPanelpath"
                                      VerticalAlignment="Center"
                                      Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                                      Fill="{TemplateBinding Foreground}"
                                      FlowDirection="LeftToRight" />
                            </Grid>
                            <ContentPresenter x:Name="HeaderHost"
                                              Grid.Column="1"
                                              Margin="2,1,2,1"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True" />
                            <Grid x:Name="ArrowPanel"
                                  Grid.Column="3"
                                  Margin="4,0,6,0"
                                  VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath"
                                      VerticalAlignment="Center"
                                      Data="M0,0 L0,8 L4,4 z"
                                      Fill="{TemplateBinding Foreground}" />
                            </Grid>
                            <Popup x:Name="SubMenuPopup"
                                   AllowsTransparency="true"
                                   Focusable="false"
                                   IsOpen="{Binding Path=IsSubmenuOpen,
                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Right"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder"
                                            Background="{DynamicResource LightBrush}"
                                            BorderThickness="1"
                                            Opacity="0.8">
                                        <Border.BorderBrush>
                                            <SolidColorBrush Color="{DynamicResource MidColor}" />
                                        </Border.BorderBrush>
                                    </Border>
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                            <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger SourceName="SubMenuPopup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="SubMenu" Property="Margin" Value="0,0,3,3" />
                            <Setter TargetName="SubMenu" Property="SnapsToDevicePixels" Value="true" />
                            <Setter TargetName="SubMenuBorder" Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HightlightedOff_BeginStoryboard" Storyboard="{StaticResource HightlightedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HighlightedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true"
                          KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <Border x:Name="border"
                                Background="{DynamicResource LightBrush}"
                                CornerRadius="2,2,0,0">
                            <TabPanel x:Name="HeaderPanel"
                                      Width="Auto"
                                      Height="Auto"
                                      Panel.ZIndex="1"
                                      IsItemsHost="true"
                                      KeyboardNavigation.TabIndex="1"
                                      RenderTransformOrigin="0.5,0.5">
                                <TabPanel.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.LayoutTransform>
                                <TabPanel.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.RenderTransform>

                            </TabPanel>
                        </Border>
                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Grid.Column="0"
                                Background="{DynamicResource ShadeBrush}"
                                CornerRadius="0,0,2,2"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <Border x:Name="border1"
                                Width="Auto"
                                Height="Auto"
                                Margin="2,0,2,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                BorderThickness="0,0,0,1"
                                CornerRadius="10,0,0,0"
                                Opacity="0.5">
                            <Border.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                    <SkewTransform AngleX="0" AngleY="0" />
                                    <RotateTransform Angle="0" />
                                    <TranslateTransform X="0" Y="0" />
                                </TransformGroup>
                            </Border.LayoutTransform>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource DarkColor}" />
                            </Border.BorderBrush>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="border" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ContentPanel" Property="CornerRadius" Value="2,2,0,0" />
                            <Setter TargetName="border" Property="CornerRadius" Value="0,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">

                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="border" Property="Grid.Column" Value="0" />
                            <Setter TargetName="border" Property="Margin" Value="0,0,0,0" />
                            <Setter TargetName="ContentPanel" Property="Margin" Value="0,0,0,0" />
                            <Setter TargetName="border1" Property="LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="-90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="border1" Property="Margin" Value="0,0,0,0" />
                            <Setter TargetName="border" Property="CornerRadius" Value="0,2,2,0" />
                            <Setter TargetName="ContentPanel" Property="CornerRadius" Value="0,2,2,0" />

                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="border" Property="Grid.Column" Value="1" />
                            <Setter TargetName="border1" Property="LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="border1" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ContentPanel" Property="CornerRadius" Value="2,0,0,2" />
                            <Setter TargetName="border" Property="CornerRadius" Value="0,2,2,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}" d:IsControlPart="True">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid" Margin="2,1,2,3">
                        <Grid.LayoutTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1" />
                                <SkewTransform AngleX="0" AngleY="0" />
                                <RotateTransform Angle="0" />
                                <TranslateTransform X="0" Y="0" />
                            </TransformGroup>
                        </Grid.LayoutTransform>
                        <Border x:Name="border"
                                BorderBrush="{x:Null}"
                                CornerRadius="2,2,2,2"
                                Opacity="0.5">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.5,0.039" EndPoint="0.5,0.976">
                                    <GradientStop Offset="0" Color="#7F595959" />
                                    <GradientStop Offset="1" Color="#19FFFFFF" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="SelectedBorder"
                                Background="{DynamicResource SelectedBackgroundBrush}"
                                BorderBrush="{x:Null}"
                                CornerRadius="2,2,2,2"
                                Opacity="0" />
                        <Border x:Name="HoverBorder"
                                BorderBrush="{x:Null}"
                                CornerRadius="2,2,2,2"
                                Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.5,0.039" EndPoint="0.5,0.976">
                                    <GradientStop Offset="0" Color="#7F595959" />
                                    <GradientStop Offset="1" Color="#19FFFFFF" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Grid>
                            <ContentPresenter x:Name="ContentSite"
                                              Margin="6,1,6,1"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              d:LayoutOverrides="Width, Height" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter TargetName="grid" Property="LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="-90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter TargetName="grid" Property="LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="ContentSite" Property="LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="180" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid" Property="LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="180" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
                            </Trigger.EnterActions>
                            <Setter Property="Panel.ZIndex" Value="100" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="grid" Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter TargetName="border" Property="Opacity" Value="0.9" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="grid" Property="Opacity" Value="0.3" />
                        </Trigger>
                        <!--  HT Start  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource WarningTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Warning" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ErrorTemplate}" />
                            <MultiTrigger.Conditions>
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Tag" Value="Error" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <!--  HT End  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NuclearSliderThumb"
           TargetType="{x:Type Thumb}"
           d:IsControlPart="True">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="PressedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="PressedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PressedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Background"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3" />
                        <Border x:Name="HoverBorder"
                                Background="{StaticResource HoverBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="0" />
                        <Border x:Name="HoverShineBorder"
                                Background="{StaticResource HoverShineBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="0" />
                        <Border x:Name="PressedBorder"
                                Background="{StaticResource PressedBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="0" />
                        <Border x:Name="ShineBorder"
                                Background="{StaticResource ShineBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="1,1,1,1" />
    </Style>

    <Style TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TickBar x:Name="TopTick"
                                 Height="4"
                                 Fill="{DynamicResource GlyphBrush}"
                                 Placement="Top"
                                 SnapsToDevicePixels="True"
                                 Visibility="Collapsed" />
                        <Border x:Name="Border"
                                Grid.Row="1"
                                Height="4"
                                Margin="0"
                                Background="{DynamicResource LightBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="2" />
                        <Track x:Name="PART_Track" Grid.Row="1">
                            <Track.Thumb>
                                <Thumb Width="20"
                                       Background="{DynamicResource NormalBrush}"
                                       Foreground="{x:Null}"
                                       Style="{DynamicResource NuclearSliderThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <TickBar x:Name="BottomTick"
                                 Grid.Row="2"
                                 Height="4"
                                 Fill="{TemplateBinding Foreground}"
                                 Placement="Bottom"
                                 SnapsToDevicePixels="True"
                                 Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{DynamicResource ControlBackgroundBrush}"
                                BorderBrush="{x:Null}"
                                BorderThickness="1"
                                CornerRadius="3,3,3,3">
                            <ScrollViewer CanContentScroll="False"
                                          Focusable="False"
                                          Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                                          HorizontalScrollBarVisibility="Auto"
                                          Padding="4"
                                          Style="{DynamicResource NuclearScrollViewer}"
                                          VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NuclearTreeViewItemToggleButton"
           TargetType="{x:Type ToggleButton}"
           d:IsControlPart="True">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Width="15" Height="13">
                        <Path x:Name="IsExpandedPath"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 0 4 L 8 4 L 4 8 Z"
                              Fill="{DynamicResource GlyphBrush}"
                              Visibility="Collapsed" />
                        <Path x:Name="ExpandPath"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 4 0 L 8 4 L 4 8 Z"
                              Fill="{DynamicResource GlyphBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="IsExpandedPath" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ExpandPath" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" d:IsControlPart="True">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectionBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="SelectionBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      Background="{x:Null}"
                                      BorderBrush="{x:Null}"
                                      ClickMode="Press"
                                      Foreground="{x:Null}"
                                      IsChecked="{Binding Path=IsExpanded,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{DynamicResource NuclearTreeViewItemToggleButton}" />
                        <Border x:Name="Selection_Border"
                                Grid.Column="1"
                                BorderThickness="1,1,1,1"
                                CornerRadius="3,3,3,3">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="MainBorder"
                                        Background="{DynamicResource NormalBrush}"
                                        CornerRadius="2,2,2,2"
                                        Opacity="0.25" />
                                <Border x:Name="SelectionBorder"
                                        Background="{DynamicResource SelectedBackgroundBrush}"
                                        CornerRadius="2,2,2,2"
                                        Opacity="0" />
                                <Border x:Name="HoverBorder"
                                        Background="{DynamicResource NormalBrush}"
                                        CornerRadius="2,2,2,2"
                                        Opacity="0" />
                                <ContentPresenter x:Name="PART_Header"
                                                  Height="Auto"
                                                  Margin="2,0,2,0"
                                                  ContentSource="Header"
                                                  d:LayoutOverrides="Width" />
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard1" Storyboard="{StaticResource SelectedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            <Setter TargetName="Selection_Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter TargetName="Selection_Border" Property="Opacity" Value="0.5" />
                            <Setter TargetName="Selection_Border" Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Selection_Border" Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition SourceName="Selection_Border" Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Selection_Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter TargetName="Selection_Border" Property="Opacity" Value="0.8" />
                            <Setter TargetName="Selection_Border" Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="Black"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="ButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#F3F3F3" />
        <GradientStop Offset="0.5" Color="#EBEBEB" />
        <GradientStop Offset="0.5" Color="#DDDDDD" />
        <GradientStop Offset="1" Color="#CDCDCD" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="HoverShineBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="CheckedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="CheckedBorder"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="Pressed"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="Pressed"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid">

                        <Border x:Name="Border"
                                Background="{DynamicResource NormalBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3,3,3,3"
                                Padding="{TemplateBinding Padding}" />
                        <Border x:Name="CheckedBorder"
                                Background="{DynamicResource SelectedBackgroundBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3,3,3,3"
                                Opacity="0"
                                Padding="{TemplateBinding Padding}" />
                        <Border x:Name="HoverBorder"
                                Background="{DynamicResource HoverBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3,3,3,3"
                                Opacity="0"
                                Padding="{TemplateBinding Padding}" />
                        <Border x:Name="HoverShineBorder"
                                Background="{DynamicResource HoverShineBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3,3,3,3"
                                Opacity="0"
                                Padding="{TemplateBinding Padding}" />
                        <Border x:Name="Pressed"
                                Background="{DynamicResource PressedBrush}"
                                BorderBrush="{DynamicResource PressedBorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3,3,3,3"
                                Opacity="0"
                                Padding="{TemplateBinding Padding}" />
                        <Rectangle x:Name="Shine"
                                   Height="Auto"
                                   Margin="2,2,2,2"
                                   VerticalAlignment="Stretch"
                                   Opacity="1"
                                   RadiusX="3"
                                   RadiusY="3"
                                   Stroke="{x:Null}">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.5,0.042" EndPoint="0.5,0.971">
                                    <GradientStop Offset="0" Color="#26FFFFFF" />
                                    <GradientStop Offset="1" Color="#00FFFFFF" />
                                    <GradientStop Offset="0.467" Color="#26FFFFFF" />
                                    <GradientStop Offset="0.475" Color="#00FFFFFF" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>

                        <ContentPresenter Margin="4,4,4,4"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true" />
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter TargetName="grid" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />

    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#D5DFE5" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Grid.RowSpan="4"
                                Grid.ColumnSpan="4"
                                Background="{DynamicResource LightBrush}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="4,4,4,4" />
                        <Border Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.ColumnSpan="4"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="4">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource MainColor}" />
                                </Border.BorderBrush>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource MainColor}" />
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                        </Border>
                        <Border Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="4"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4" />
                        <Border x:Name="Main"
                                Grid.RowSpan="2"
                                Grid.ColumnSpan="4"
                                Background="{DynamicResource NormalBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="1,1,1,0"
                                CornerRadius="2,2,0,0" />
                        <Rectangle x:Name="Shine"
                                   Grid.RowSpan="2"
                                   Grid.ColumnSpan="4"
                                   Height="Auto"
                                   Margin="1,1,1,1"
                                   VerticalAlignment="Stretch"
                                   Opacity="1"
                                   RadiusX="3"
                                   RadiusY="3"
                                   Stroke="{x:Null}">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.5,0.042" EndPoint="0.5,0.971">
                                    <GradientStop Offset="0" Color="#26FFFFFF" />
                                    <GradientStop Offset="1" Color="#00FFFFFF" />
                                    <GradientStop Offset="0.467" Color="#26FFFFFF" />
                                    <GradientStop Offset="0.475" Color="#00FFFFFF" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>

                        <Border x:Name="Header"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1"
                                Padding="3,1,3,0">
                            <ContentPresenter Margin="0,4,0,4"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>

                        <ContentPresenter Grid.Row="2"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
            </Setter.Value>
        </Setter>
    </Style>
    <!--
        <SolidColorBrush x:Key="ListBorder" Color="#828790" />
        <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
        <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
        <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <DockPanel Margin="{TemplateBinding Padding}">
        <ScrollViewer Focusable="false" DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
        <GridViewHeaderRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,0,2,0" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" />
        
        </ScrollViewer>
        <ScrollContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ScrollContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" KeyboardNavigation.DirectionalNavigation="Local" />
        </DockPanel>
        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_HorizontalScrollBar" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_VerticalScrollBar" Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        <DockPanel Grid.Column="1" Grid.Row="1" Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}" LastChildFill="false">
        <Rectangle Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Width="1" Fill="White" DockPanel.Dock="Left" />
        <Rectangle Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Height="1" Fill="White" DockPanel.Dock="Top" />
        </DockPanel>
        </Grid>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
        <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#FF042271" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
        <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" BorderBrush="{DynamicResource DefaultedBorderBrush}" Background="{DynamicResource ControlBackgroundBrush}">
        
        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </ScrollViewer>
        </Border>
        
        <ControlTemplate.Triggers>
        <Trigger Property="IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
        <Style x:Key="ListViewItemFocusVisual">
        <Setter Property="Control.Template">
        <Setter.Value>
        <ControlTemplate>
        <Rectangle Stroke="#8E6EA6F5" StrokeThickness="1" RadiusX="2" RadiusY="2" />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
        
        <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
        <ControlTemplate.Resources>
        <Storyboard x:Key="HoverOn">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="HoverOff">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="SelectedOn">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="SelectedOff">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="FocussedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocussedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        </ControlTemplate.Resources>
        <Border SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" x:Name="border">
        
        <Grid Margin="2,0,2,0">
        <Rectangle x:Name="Background" IsHitTestVisible="False" Opacity="0.25" Fill="{StaticResource NormalBrush}" RadiusX="1" RadiusY="1"/>
        <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}" RadiusX="1" RadiusY="1"/>
        <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource SelectedBackgroundBrush}" RadiusX="1" RadiusY="1"/>
        <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,2,0,2" VerticalAlignment="Stretch" />
        </Grid>
        
        </Border>
        <ControlTemplate.Triggers>
        <Trigger Property="IsSelected" Value="true">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
        </Trigger.EnterActions>
        
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
        </MultiTrigger.ExitActions>
        <MultiTrigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </MultiTrigger.EnterActions>
        <MultiTrigger.Conditions>
        <Condition Property="IsMouseOver" Value="True" />
        <Condition Property="Selector.IsSelected" Value="False" />
        </MultiTrigger.Conditions>
        
        </MultiTrigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
        <Condition Property="Selector.IsSelected" Value="True" />
        <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        
        </MultiTrigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="Fill" TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
        <Condition Property="IsSelected" Value="true" />
        <Condition Property="Selector.IsSelectionActive" Value="false" />
        </MultiTrigger.Conditions>
        
        
        </MultiTrigger>
        
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="Selector.IsSelected" Value="True">
        <Setter Property="Foreground">
        <Setter.Value>
        <SolidColorBrush Color="{DynamicResource BlackColor}" />
        </Setter.Value>
        </Setter>
        </Trigger>
        </Style.Triggers>
        </Style>
        
        
        <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-8.5" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Padding" Value="0,3,0,4" />
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
        <Border Padding="{TemplateBinding Padding}">
        <Rectangle HorizontalAlignment="Center" Width="0.5">
        <Rectangle.Fill>
        <SolidColorBrush Color="{DynamicResource WhiteColor}" />
        </Rectangle.Fill>
        </Rectangle>
        </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
        <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
        <ControlTemplate.Resources>
        <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        </ControlTemplate.Resources>
        <Grid Margin="0,1,0,1">
        <Grid>
        
        <Border x:Name="Main" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" />
        <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="0" RadiusY="0" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine" Fill="{DynamicResource ShineBrush}"/>
        <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource HoverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" Opacity="0" />
        <Border x:Name="HoverShineBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource HoverShineBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" Opacity="0" />
        <Border x:Name="PressedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" CornerRadius="0,0,0,0" Opacity="0" />
        
        <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
        <Border.BorderBrush>
        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
        </Border.BorderBrush>
        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" Margin="2,2,2,2" />
        </Border>
        </Grid>
        <Canvas>
        <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}" Margin="0,0,7,0" Width="Auto" HorizontalAlignment="Stretch" />
        </Canvas>
        </Grid>
        <ControlTemplate.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </Trigger.EnterActions>
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
        </Trigger.EnterActions>
        </Trigger>
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <Trigger Property="Role" Value="Padding">
        <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="Role" Value="Floating">
        <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Collapsed" />
        <Setter Property="Background" Value="Yellow" />
        <Setter Property="Foreground" Value="{DynamicResource MouseOverBrush}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        </Style>
        
        <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
        <ControlTemplate.Resources>
        <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="PressedOn">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="PressedOff">
        
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        
        </Storyboard>
        <Storyboard x:Key="FocusedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocussedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        
        </ControlTemplate.Resources>
        <Grid x:Name="Grid">
        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
        <Border x:Name="HoverBorder" Opacity="0" Background="{StaticResource HoverBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
        <Border x:Name="HoverShineBorder" Opacity="0" Background="{StaticResource HoverShineBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
        <Border x:Name="PressedBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource PressedBrush}" />
        <Border x:Name="ShineBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource ShineBrush}" Opacity="1" />
        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
        <Border x:Name="FocusVisualElement" IsHitTestVisible="false" BorderBrush="{StaticResource HoverShineBrush}" BorderThickness="1" CornerRadius="3,3,3,3" Margin="1,1,1,1" Opacity="0" />
        </Grid>
        <ControlTemplate.Triggers>
        <Trigger Property="IsDefault" Value="True">
        <Setter Property="BorderBrush" TargetName="ShineBorder" Value="{DynamicResource DefaultedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard"/>
        </Trigger.EnterActions>
        
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </Trigger.EnterActions>
        
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
        </Trigger.EnterActions>
        </Trigger>
        <Trigger Property="IsEnabled" Value="true" />
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background" />
        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="ShineBorder" />
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="Opacity" TargetName="Grid" Value="0.5"/>
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        </Style>
        
        <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
        <ControlTemplate.Resources>
        <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="CheckedTrue">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="CheckedFalse">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="IndeterminateOn">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="IndeterminateOff">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocussedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocussedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        </ControlTemplate.Resources>
        <BulletDecorator Background="Transparent" x:Name="bulletDecorator">
        <BulletDecorator.Bullet>
        <Grid Width="16" Height="16">
        <Rectangle Height="14" Margin="1" x:Name="Background" Width="14" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
        <Rectangle Height="14" Margin="1" x:Name="BackgroundOverlay" Width="14" Opacity="0" Fill="{x:Null}" Stroke="{StaticResource HoverBrush}" StrokeThickness="2" />
        <Rectangle Height="16" x:Name="PressedRectangle" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverBrush}" StrokeThickness="1" />
        <Path Height="10" Margin="1,1,0,1.5" x:Name="CheckIcon" Width="10.5" Opacity="0" Fill="{StaticResource GlyphBrush}" Stretch="Fill" Data="M102.03442,598.79645 L105.22962,597.78918 L106.78825,600.42358 C106.78825,600.42358 108.51028,595.74304 110.21724,593.60419 C112.00967,591.35822 114.89314,591.42316 114.89314,591.42316 C114.89314,591.42316 112.67844,593.42645 111.93174,594.44464 C110.7449,596.06293 107.15683,604.13837 107.15683,604.13837 z" />
        <Rectangle Height="8" x:Name="IndeterminateIcon" Width="10" Opacity="0" Fill="{StaticResource GlyphBrush}" />
        <Rectangle Height="14" x:Name="DisabledVisualElement" Width="14" Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" />
        <Rectangle Height="16" x:Name="ContentFocusVisualElement" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverShineBrush}" StrokeThickness="1" />
        <Rectangle Height="12" x:Name="ShineRectangle" Width="14" IsHitTestVisible="false" Opacity="1" Stroke="{x:Null}" StrokeThickness="1" Fill="{StaticResource ShineBrush}" Margin="2,2,2,2" />
        </Grid>
        </BulletDecorator.Bullet>
        <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" />
        </BulletDecorator>
        <ControlTemplate.Triggers>
        <Trigger Property="IsFocused" Value="True">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource FocussedOn}" x:Name="FocussedOn_BeginStoryboard"/>
        </Trigger.EnterActions>
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
        <Condition Property="IsChecked" Value="True" />
        <Condition Property="IsThreeState" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
        <BeginStoryboard x:Name="ThreeStateOn_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
        <BeginStoryboard x:Name="ThreeStateOff_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}" />
        </MultiTrigger.ExitActions>
        </MultiTrigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
        <Condition Property="IsChecked" Value="{x:Null}" />
        <Condition Property="IsThreeState" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
        <BeginStoryboard x:Name="ThreeStateOn1_BeginStoryboard" Storyboard="{StaticResource IndeterminateOn}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
        <BeginStoryboard x:Name="ThreeStateOff1_BeginStoryboard" Storyboard="{StaticResource IndeterminateOff}" />
        </MultiTrigger.ExitActions>
        <Setter Property="Visibility" TargetName="CheckIcon" Value="Hidden"/>
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="false">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource CheckedTrue}" x:Name="CheckedTrue_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource CheckedFalse}"/>
        </Trigger.EnterActions>
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
        </Trigger.ExitActions>
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background" />
        <Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Background" />
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="Opacity" TargetName="bulletDecorator" Value="0.5"/>
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        </Style>
    -->
    <!--
        <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
        <ControlTemplate.Resources>
        <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="CheckedOn">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="CheckedOff">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocussedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocussedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        </ControlTemplate.Resources>
        <BulletDecorator Background="Transparent" x:Name="bulletDecorator">
        <BulletDecorator.Bullet>
        <Grid Width="16" Height="16">
        <Ellipse Height="14" Margin="1" x:Name="Background" Width="14" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
        <Ellipse Height="14" Margin="1" x:Name="BackgroundOverlay" Width="14" StrokeThickness="2" Stroke="{StaticResource HoverBrush}" Opacity="0" />
        <Ellipse Height="14" Margin="1" x:Name="PressedEllipse" Width="14" StrokeThickness="{TemplateBinding BorderThickness}" Stroke="{StaticResource HoverBrush}" Opacity="0" />
        <Ellipse Height="6" x:Name="CheckIcon" Width="6" Opacity="0" Fill="{StaticResource GlyphBrush}" />
        <Ellipse Height="14" x:Name="DisabledVisualElement" Width="14" Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" />
        <Ellipse Height="16" x:Name="ContentFocusVisualElement" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverShineBrush}" StrokeThickness="1" />
        <Ellipse Height="12" Margin="2,2,2,2" x:Name="ShineEllipse" Width="12" StrokeThickness="{TemplateBinding BorderThickness}" Stroke="{x:Null}" Fill="{StaticResource ShineBrush}" />
        </Grid>
        </BulletDecorator.Bullet>
        <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" />
        </BulletDecorator>
        <ControlTemplate.Triggers>
        <Trigger Property="IsFocused" Value="True">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource FocussedOn}" x:Name="FocussedOn_BeginStoryboard"/>
        </Trigger.EnterActions>
        </Trigger>
        <Trigger Property="IsChecked" Value="false">
        
        <Trigger.ExitActions>
        <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
        </Trigger.EnterActions>
        
        </Trigger>
        <Trigger Property="IsChecked" Value="True"/>
        <Trigger Property="IsMouseOver" Value="true">
        
        <Trigger.ExitActions>
        <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </Trigger.EnterActions>
        
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        
        <Trigger.ExitActions>
        <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
        </Trigger.EnterActions>
        
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Fill" TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
        <Setter Property="Stroke" TargetName="Background" Value="{DynamicResource DisabledBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
        <Setter Property="Opacity" TargetName="bulletDecorator" Value="0.5"/>
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground">
        <Setter.Value>
        <SolidColorBrush Color="{DynamicResource TopGradientSelectColor}" />
        </Setter.Value>
        </Setter>
        </Trigger>
        </Style.Triggers>
        </Style>
    -->
    <!--
        <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
        <Grid x:Name="grid">
        <ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />
        <ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="{DynamicResource LightBrush}" IsReadOnly="{TemplateBinding IsReadOnly}" BorderBrush="{DynamicResource NormalBorderBrush}" Foreground="#FFFFFFFF" />
        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
        <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
        <Border x:Name="DropDownBorder" Background="{DynamicResource ControlBackgroundBrush}" CornerRadius="3,3,3,3" />
        <ScrollViewer Margin="4,6,4,6" Style="{DynamicResource NuclearScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True" Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}">
        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
        </ScrollViewer>
        </Grid>
        </Popup>
        </Grid>
        <ControlTemplate.Triggers>
        <Trigger Property="HasItems" Value="false">
        <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
        </Trigger>
        <Trigger Property="IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
        </Trigger>
        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
        <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder" />
        </Trigger>
        <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox" />
        <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        </Style>
    -->
    <!--
        <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
        <ControlTemplate.Resources>
        <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocusedOn">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="FocusedOff">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
        <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
        <Border x:Name="Border" Opacity="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" Background="{TemplateBinding Background}">
        <Grid>
        <Border BorderThickness="1">
        <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource NuclearScrollViewer}" />
        </Border>
        </Grid>
        </Border>
        <Border x:Name="HoverBorder" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource GlyphBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />
        <Border x:Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource HoverShineBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />
        
        
        </Grid>
        <ControlTemplate.Triggers>
        <Trigger Property="IsFocused" Value="True">
        <Trigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard"/>
        </Trigger.ExitActions>
        <Trigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard"/>
        </Trigger.EnterActions>
        
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.ExitActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
        </MultiTrigger.ExitActions>
        <MultiTrigger.EnterActions>
        <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </MultiTrigger.EnterActions>
        <MultiTrigger.Conditions>
        <Condition Property="IsMouseOver" Value="True" />
        <Condition Property="IsFocused" Value="False" />
        </MultiTrigger.Conditions>
        
        </MultiTrigger>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}"/>
        <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="#FF000000"/>
        </Style>
    -->

    <LinearGradientBrush x:Key="ToolBarHorizontalBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FF444444" />
        <GradientStop Offset="0.5" Color="#FF4C4C4C" />
        <GradientStop Offset="1" Color="#FF505050" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FF444444" />
        <GradientStop Offset="0.5" Color="#FF4C4C4C" />
        <GradientStop Offset="1" Color="#FF505050" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ToolBarButtonHover" Color="{StaticResource MainColor}" />
    <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6" />
    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd"
                            Background="{DynamicResource NormalBrush}"
                            CornerRadius="0,0,0,0"
                            SnapsToDevicePixels="true">
                        <Canvas Width="6"
                                Height="7"
                                Margin="7,2,2,2"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                SnapsToDevicePixels="true">
                            <Path Data="M 1 1.5 L 6 1.5" Stroke="White" />
                            <Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}" />
                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="White" />
                            <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBarButtonHover}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFFDFDFD" />
    <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFFFFFFF" />
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent"
                            CornerRadius="0,0,0,0"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile"
                                              Viewbox="0,0,4,4"
                                              ViewboxUnits="Absolute"
                                              Viewport="0,0,4,4"
                                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z" />
                                            <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z" />
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="#ECECEC" />
        <GradientStop Offset="0.5" Color="#DDDDDD" />
        <GradientStop Offset="1" Color="#A0A0A0" />
    </LinearGradientBrush>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            CornerRadius="0,0,3,3"
                            SnapsToDevicePixels="true">
                        <Canvas Width="7"
                                Height="6"
                                Margin="2,7,2,2"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                SnapsToDevicePixels="true">
                            <Path Data="M 1.5 1 L 1.5 6" Stroke="White" />
                            <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}" />
                            <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White" />
                            <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBarButtonHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBarButtonHover}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarVerticalBackground" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="#FFFFFF" />
        <GradientStop Offset="0.5" Color="#FFFBFF" />
        <GradientStop Offset="1" Color="#F7F7F7" />
    </LinearGradientBrush>

    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid"
                          Margin="3,1,1,1"
                          Background="#FF505050"
                          SnapsToDevicePixels="true">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton"
                                          ClickMode="Press"
                                          FocusVisualStyle="{x:Null}"
                                          IsChecked="{Binding Path=IsOverflowOpen,
                                                              Mode=TwoWay,
                                                              RelativeSource={RelativeSource TemplatedParent}}"
                                          IsEnabled="{TemplateBinding HasOverflowItems}"
                                          Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" />
                            <Popup x:Name="OverflowPopup"
                                   AllowsTransparency="true"
                                   Focusable="false"
                                   IsOpen="{Binding Path=IsOverflowOpen,
                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   StaysOpen="False">
                                <Border x:Name="Shdw">
                                    <Border Background="{DynamicResource MidBrush}"
                                            BorderBrush="{DynamicResource MidBrush}"
                                            BorderThickness="1,1,1,1">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                              Margin="2"
                                                              FocusVisualStyle="{x:Null}"
                                                              Focusable="true"
                                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                                              KeyboardNavigation.TabNavigation="Cycle"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                              WrapWidth="200" />
                                    </Border>
                                </Border>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder"
                                Margin="0,0,11,0"
                                Background="{DynamicResource NormalBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0,0,0,0"
                                Padding="{TemplateBinding Padding}">
                            <Grid>

                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Thumb x:Name="ToolBarThumb"
                                           Width="10"
                                           Margin="-3,0,0,0"
                                           Padding="6,5,1,6"
                                           Style="{StaticResource ToolBarThumbStyle}" />
                                    <ContentPresenter x:Name="ToolBarHeader"
                                                      Margin="4,0,4,0"
                                                      HorizontalAlignment="Center"
                                                      VerticalAlignment="Center"
                                                      ContentSource="Header"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <ToolBarPanel x:Name="PART_ToolBarPanel"
                                                  Margin="0,1,2,2"
                                                  Background="{DynamicResource NormalBrush}"
                                                  IsItemsHost="true"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </DockPanel>
                                <Rectangle Grid.ColumnSpan="1"
                                           Height="13.995"
                                           Margin="0,0,2,0"
                                           VerticalAlignment="Top"
                                           IsHitTestVisible="False"
                                           Opacity="0.15">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger SourceName="OverflowPopup" Property="HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="true" />
                            <Setter TargetName="Shdw" Property="Background" Value="#71000000" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="Grid" Property="Margin" Value="1,3,1,1" />
                            <Setter TargetName="OverflowButton" Property="Style" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}" />
                            <Setter TargetName="ToolBarThumb" Property="Height" Value="10" />
                            <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
                            <Setter TargetName="ToolBarThumb" Property="Margin" Value="-1,-3,0,0" />
                            <Setter TargetName="ToolBarThumb" Property="Padding" Value="5,6,6,1" />
                            <Setter TargetName="ToolBarHeader" Property="Margin" Value="0,0,0,4" />
                            <Setter TargetName="PART_ToolBarPanel" Property="Margin" Value="1,0,2,2" />
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="OverflowGrid" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="OverflowGrid" Property="VerticalAlignment" Value="Bottom" />
                            <Setter TargetName="OverflowPopup" Property="Placement" Value="Right" />
                            <Setter TargetName="MainPanelBorder" Property="Margin" Value="0,0,0,11" />
                            <Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

</ResourceDictionary>